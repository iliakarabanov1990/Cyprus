{"version":3,"file":"main.92677235628f7ef894ff.js","mappings":"uBAAIA,EACAC,EACAC,EACAC,E,itBCEG,MAAeC,EAKlB,WAAAC,CAAYC,EAAcC,GAHjB,mBACA,mBAGLC,KAAKC,OAASC,QAAQC,SAAQ,GAC9B,EAAAH,KAAI,EAASD,EAAI,KACjB,EAAAC,KAAI,EAASF,EAAI,KACjBM,MACJ,CAEA,IAAAA,GACIJ,KAAKC,OAASD,KAAKK,MACvB,CAgBA,SAAIC,GACA,OAAON,KAAKC,MAChB,CAEA,QAAIF,GACA,OAAO,EAAAC,KAAI,MACf,CAEA,QAAIF,GACA,OAAO,EAAAE,KAAI,MACf,E,uLCvCG,MAAMO,UAA4BX,EACvC,WAAAC,CAAYC,EAAcC,GACxBS,MAAMV,EAAMC,EACd,CAEA,UAAMM,GACJ,OAAOH,QAAQC,SAAQ,EACzB,CAEA,YAAMM,SACET,KAAKC,OACX,MAAMS,EAAOV,KAAKW,yBAClB,OAAOT,QAAQC,QAAQO,GAAQ,GACjC,CAEA,cAAME,SACEZ,KAAKC,OACX,MAAMS,EAAOV,KAAKa,0BAClB,OAAOX,QAAQC,QAAQO,GAAQ,GACjC,CAEA,cAAMI,CAASJ,GAMb,aALMV,KAAKM,MAGXN,KAAKe,kBAAkBL,GAEhBR,QAAQC,SAAQ,EACzB,CAEA,gBAAMa,CAAWN,GAMf,aALMV,KAAKM,MAGXN,KAAKe,kBAAkBL,GAEhBR,QAAQC,SAAQ,EACzB,CAEA,YAAM,SACEH,KAAKM,MACXW,aAAaC,WAAWlB,KAAKD,KAAO,IAAMC,KAAKF,KACjD,CAEQ,sBAAAa,GACN,MAAMQ,EAAcF,aAAaG,QAAQpB,KAAKD,KAAO,IAAMC,KAAKF,MAEhE,OAAOqB,EAAcE,KAAKC,MAAMH,GAAe,IACjD,CAEQ,uBAAAN,GACN,MAAMM,EAAcF,aAAaG,QAAQpB,KAAKD,KAAO,IAAMC,KAAKF,MAEhE,OAAOqB,EAAcE,KAAKC,MAAMH,GAAe,IACjD,CAEQ,iBAAAJ,CAAkBL,GACxB,MAAMa,EAAWF,KAAKG,UAAUd,GAChCO,aAAaQ,QAAQzB,KAAKD,KAAO,IAAMC,KAAKF,KAAMyB,EACpD,CAEA,GAAAG,CAAIC,GACF,OAAOzB,QAAQC,QAAQ,CAAC,CAAC,GAC3B,CAEA,UAAAyB,CAAWC,GACT,OAAO3B,QAAQC,QAAQ,CAAC,CAAC,GAC3B,CAEA,aAAA2B,CAAcH,EAAiBI,GAC7B,OAAO7B,QAAQC,QAAQ,CAAC,CAAC,GAC3B,CAEA,gBAAA6B,CAAiBL,EAAiBM,EAAmBC,GACnD,OAAOhC,QAAQC,QAAQ,CAAC,CAAC,GAC3B,EC9EK,MAAMgC,EAAS,ICQf,cAAyBvC,EAE5B,WAAAC,CAAYC,EAAcC,GACtBS,MAAMV,EAAMC,EAChB,CAEA,UAAMM,GACF,OAAOH,QAAQC,SAAQ,EAC3B,CAEA,SAAMuB,CAAIC,GAEN,OAAOzB,QAAQC,QAAQ,CAAC,CAAC,GAC7B,CAEA,YAAMM,GAEF,OAAOP,QAAQC,QAAQ,CAAC,CAAC,GAC7B,CAEA,cAAMW,CAASJ,EAAeiB,GAC1B,OAAOzB,QAAQC,SAAQ,EAC3B,CAEA,gBAAMyB,CAAWC,GACb,OAAOO,MAAM,GACZC,MAAKC,GAAYA,EAASC,QAC/B,CAEA,mBAAMT,CAAcH,EAAiBI,GAEjC,IAAIS,EAEJ,OAAQb,GACJ,KAAKc,EAAA,EAASC,UACVF,EAAO,EACP,MACJ,KAAKC,EAAA,EAASE,UACVH,EAAO,EACP,MACJ,KAAKC,EAAA,EAASG,WACVJ,EAAO,EACP,MACJ,QACI,OAAOtC,QAAQC,QAAQ,IAG/B,OAAOiC,MAAMI,GAAMH,MAAKC,GAAYA,EAASC,QACjD,CAEA,sBAAMP,CAAiBL,EAAiBM,EAAmBC,GAE3D,IAAIM,EAEJ,OAAQb,GACJ,KAAKc,EAAA,EAASC,UACVF,EAAO,EACP,MACJ,KAAKC,EAAA,EAASE,UACVH,EAAO,EACP,MACJ,KAAKC,EAAA,EAASG,WACVJ,EAAO,EACP,MACJ,KAAKC,EAAA,EAASI,MACVL,EAAO,EACP,MACJ,QACI,OAAOtC,QAAQC,QAAQ,IAG3B,OAAOiC,MAAMI,GACZH,MAAKC,GAAYA,EAASC,SAC1BF,MAAKS,GAAQA,EAAKC,QAAQC,GAChBd,EAAYe,SAASD,EAAGf,OAGvC,GDrFiC,OAAQ,YAChCiB,EAAc,IAAI3C,EAAoB,OAAQ,UAC9C4C,EAAiB,IAAI5C,EAAoB,UAAW,S,sIEWjE,IAAI6C,EACJ,MAAMC,EAAYC,SAASC,MAAMC,UAAU,UACrCC,EAAcH,SAASI,cAAc,kBACrCC,EAAoBN,EAAUK,cAAc,yBAC5CE,QAAkB,KAAYnD,SAC9BoD,EAAoB,IAAI,IAAmC,CAC/D/D,KAAM,GACNgE,MAAO,CACH,MAEJC,MAAO,CACH,KACA,MAEJC,SAAU,CACN,QAON,SAHM,IAAQtC,IAAI,IAASgB,YAAYuB,aAAa,IAASvB,WAC1DL,MAAK,IAAM,IAAQX,IAAI,IAASiB,YAAYsB,aAAa,IAAStB,cAElEiB,EAAUM,QAAUN,EAAU,GAAGO,GAAG,CACrC,MAAMC,EAAUR,EAAU,GAC1BR,EAAO,IAAI,IAAKgB,EAAQD,GAAYC,EAAQN,MAAiB,GAAIM,EAAQtE,MACzEsD,EAAKiB,WAAaD,EAAQC,WAC1BC,EAAwBlB,EAAMC,SAEvB,IAAQ3B,IAAI,IAASkB,YAA8B2B,+BAA+BnB,EAC3F,CAyFA,SAASkB,EAAwBlB,EAAwBC,GAYvDA,EAAUK,cAAc,qBAAsBc,aAAa,QAASpB,EAAMtD,MAC1EuD,EAAUK,cAAc,4BAA6Bc,aAAa,QAASpB,EAAMW,OACjFV,EAAUK,cAAc,4BAA6Bc,aAAa,QAASpB,EAAMU,OAE9EV,GAAQA,EAAKiB,YACdZ,EAAYgB,YAAc,UAC1Bd,EAAkBc,YAAc,QAChCpB,EAAUK,cAAc,4BAA6Bc,aAAa,WAAY,QAC9EnB,EAAUK,cAAc,4BAA6Bc,aAAa,WAAY,QAC9EnB,EAAUK,cAAc,+BAAgCc,aAAa,OAAQ,UAC7ElB,SAASoB,eAAe,iBAAkBC,MAAMC,QAAU,SAG1DnB,EAAYgB,YAAc,QAC1Bd,EAAkBc,YAAc,QAChCpB,EAAUK,cAAc,4BAA6BmB,gBAAgB,YACrExB,EAAUK,cAAc,4BAA6BmB,gBAAgB,YACrExB,EAAUK,cAAc,+BAAgCc,aAAa,QAAS,IAC9EnB,EAAUK,cAAc,+BAAgCc,aAAa,OAAQ,YAGjF,CAEAM,eAAeC,EAAYC,EAAoBrB,GAI7C,GAFAqB,EAAMC,iBAE+B,UAAlCtB,EAAkBc,YAAwB,CAE3C,MAAMS,EAA+B,CACnCpF,KAAMqF,OAAO,IAAIC,SAAS/B,GAAW3B,IAAI,kBAAkB2D,OAC3DtB,MAAOoB,OAAO,IAAIC,SAAS/B,GAAW3B,IAAI,eAAe2D,OACzDvB,MAAOqB,OAAO,IAAIC,SAAS/B,GAAW3B,IAAI,eAAe2D,OACzDrB,SAAUmB,OAAO,IAAIC,SAAS/B,GAAW3B,IAAI,kBAAkB2D,QAG3DC,EAASzB,EAAkB0B,SAASL,GAI1C,IAHA,QAAc5B,WACd,QAAcA,SAAUgC,GAErBA,EAAQ,OAEXlC,EAAO,IAAI,IAAK8B,EAASnB,MAAOmB,EAASpB,MAAOoB,EAASlB,SAAUkB,EAASpF,YAEtEsD,EAAKoC,YAAYnD,MAAK,IAAMiC,EAAwBlB,EAAMC,KAE7DD,EAAKiB,YACNf,SAASoB,eAAe,aAAcC,MAAMC,QAAQ,OACpDa,YAAW,KAAKC,SAASC,QAAQ,GAAE,MAGnCrC,SAASoB,eAAe,eAAgBkB,aAAY,QAAmB,oBAC3E,MAEExC,EAAMiB,YAAa,EACnB,KAAYvD,SAAS,CAAC,CACpB,GAAMsC,EAAMW,MACZ,MAASX,EAAMU,MACf,KAAQV,EAAMtD,KACd,SAAY,GACZ,WAAcsD,EAAMiB,cAGtBC,EAAwBlB,EAAMC,GAC9BoC,YAAW,KAAKC,SAASC,QAAQ,GAAE,WAE9B,IAAQjE,IAAI,IAASkB,YAA8B2B,+BAA+BnB,EAC3F,CAtKAC,EAAUwC,iBAAiB,UAAWb,GAAUD,EAAYC,EAAOrB,KAEjD,IAAI,KAAO,CAC3B,CACE5D,KAAM,GACN+F,KAAM,MAGR,CACE/F,KAAM,OACN+F,KAAM,KAER,CACE/F,KAAM,UACN+F,KAAM,KACNC,OAAQ,CACN,IACE,IAAI7F,SAAuBC,IACzBsF,YAAW,IAAMtF,EAAQ,IAAI,KAAa,OAAO,IAAM,MAI/D,CACEJ,KAAM,YACN+F,KAAM,KACN3F,QAAS,CACP6F,YAAa,IACX,IACGtE,IAAI,IAASgB,YACZuB,aAAa,IAASvB,WACvBL,MAAK,IACJ,IAAQX,IAAI,IAASiB,YAAYsB,aAAa,IAAStB,aAExDN,MAAK,KACJ,MAAM2D,EAAc,IAAQtE,IAAI,IAASiB,WACzC,OAAOsD,MAAMC,KAAKF,EAAYG,WAAWC,SAAS,IAEnDC,OAAM,KAAM,MAKrB,CACEtG,KAAM,uBACN+F,KAAM,IACN3F,QAAS,CACPmG,UAAYC,IACV,MAAMC,EAAYC,OAAOF,EAAMG,OAAOF,WAChCF,EAAY,IAAQ5E,IAAI,IAASkB,YACvC,OAAO0D,EAAUK,kBAAkBJ,EAAMG,OAAOF,WAAWnE,MAAK,IAC5D4D,MAAMC,KAAKI,EAAUH,WAAWC,UAAUrD,QAAOC,GAAMA,EAAG4D,QAASzC,KAAOqC,KAAW,EAE3FpD,KAAM,IAAI,IAKd,CACErD,KAAM,YACN+F,KAAM,KACN3F,QAAS,CACPmG,UAAW,KACT,MAAMA,EAAY,IAAQ5E,IAAI,IAASkB,YACvC,OAAO0D,EAAU/B,+BAA+BnB,GAAOf,MAAK,IACxD4D,MAAMC,KAAKI,EAAUH,WAAWC,UAAUrD,QAAOC,GAAMsD,EAAUO,aAAaC,IAAI9D,EAAGmB,OAAK,EAEhGf,KAAM,IAAI,GAGZ2C,OAAQ,CACN,MACK3C,EAAMiB,YAEF,IAAInE,SAAuBC,IAC9BsF,YAAW,IAAMtF,EAAQ,IAAI,KAAa,OAAO,IAAM,MAKjE,CACEJ,KAAM,sBACN+F,KAAM,QAIAiB,Q,wDChIH,MAAeC,EAIlB,WAAAnH,CAAsBoH,EACJC,EAAgB,GACZC,EAAuB,GACnBC,EAAmB,IAHvB,KAAAH,IAAAA,EACJ,KAAAC,MAAAA,EACI,KAAAC,aAAAA,EACI,KAAAC,SAAAA,CAC1B,CAIA,YAAAC,CAAaC,GACTtH,KAAKkH,MAAQI,EAAOxH,KACpBE,KAAKmH,aAAeG,EAAOC,YAC3BvH,KAAKoH,SAAWE,EAAOE,OAC3B,CAEA,MAAIrD,GACA,OAAOnE,KAAKiH,GAChB,CAEA,QAAInH,GACA,OAAOE,KAAKkH,KAChB,CAEA,eAAIK,GACA,OAAOvH,KAAKmH,YAChB,CAEA,WAAIK,GACA,OAAOxH,KAAKoH,QAChB,E,qCCpCQK,E,kBCSL,MAAeC,UAAiBV,EAAA,EAOnC,WAAAnH,CAAYsE,EAAUrE,EAAeyH,EAAsB,GAAIC,EAAkB,GAAIG,EAAQ,EAAGC,OAAeC,EAAWnC,OAAWmC,EAAWC,EAAkB,IAC9JtH,MAAM2D,EAAIrE,EAAMyH,EAAaC,GAC7BxH,KAAK+H,OAASJ,EACd3H,KAAKgI,cAAgBJ,EACrB5H,KAAKiI,UAAYvC,EACjB1F,KAAKkI,iBAAmBJ,CAC5B,CAEA,YAAAT,CAAaC,GAET9G,MAAM6G,aAAaC,GAEnBtH,KAAKkI,iBAAoBZ,EAAOQ,gBAA8BK,KAAInF,GAAMA,IACxEhD,KAAKiI,UAAYG,EAAQ1G,IAAIe,EAAA,EAASC,YAAYtB,QAAQkG,EAAOe,WACrE,CAEA,YAAI3C,GACA,OAAO1F,KAAKiI,SAChB,CAEA,mBAAIH,GACA,OAAO9H,KAAKkI,gBAChB,CAEA,gBAAIN,GACA,OAAO5H,KAAKgI,aAChB,CAEA,SAAIL,GACA,OAAO3H,KAAK+H,MAChB,ECzCG,MAAeO,UAA4BZ,EAU9C,WAAA7H,CAAYsE,GACR3D,MAAM2D,GACNnE,KAAKuI,mBAAqB,GAC1BvI,KAAKwI,QAAU,CACnB,CAEA,eAAIC,GACA,OAAOzI,KAAK0I,YAChB,CAEA,qBAAIC,GACA,OAAO3I,KAAKuI,kBAChB,CAEA,UAAIK,GACA,OAAO5I,KAAKwI,OAChB,GF/BJ,SAAYf,GACR,yBACA,6BACA,oBACH,CAJD,CAAYA,IAAAA,EAAa,K,4pBGSlB,MAAMoB,UAAkBP,EAM3B,WAAAzI,CAAYsE,GACR3D,MAAM2D,GAJV,mBACA,mBAKInE,KAAKgI,cAAgBP,EAAcqB,UACnC,EAAA9I,KAAI,EAAU,GAAE,IACpB,CAEA,gBAAM+I,GAEF,OAAO7I,QAAQC,SAAQ,EAC3B,CAEA,YAAAkH,CAAaC,GAET9G,MAAM6G,aAAaC,GAEnB,EAAAtH,KAAI,EAAYoI,EAAQ1G,IAAIe,EAAA,EAASE,YAAYvB,QAAQkG,EAAOd,WAA+B,KAC/FxG,KAAK0I,aAAepB,EAAOmB,YAC3BzI,KAAKuI,mBAAqBjB,EAAOqB,kBACjC3I,KAAKwI,QAAUlB,EAAOsB,OACtB,EAAA5I,KAAI,EAAUsH,EAAO0B,MAAe,KACpChJ,KAAK+H,OAAST,EAAOK,KACzB,CAEA,WAAIf,GACA,OAAO,EAAA5G,KAAI,MACf,CAEA,SAAIgJ,GACA,OAAO,EAAAhJ,KAAI,MACf,E,4BAlCO,EAAAiJ,UAAYxG,EAAA,EAASE,U,aCHzB,MAAeuG,EAIlB,WAAArJ,GACIG,KAAKmJ,YAAc,IAAIC,GAC3B,CAMA,mBAAMC,CAAcJ,GAEhB,aAAa,KAAOnH,cAAcmH,EAAWK,OAAOC,KAAKvJ,KAAKmG,YAIlE,CAEA,kBAAMlC,CAAagF,GAEf,MAAMO,QAAmBxJ,KAAKqJ,cAAcJ,GAI5C,OAHIO,GACAxJ,KAAKyJ,eAAeD,GAEjBtJ,QAAQC,SAAQ,EAC3B,CAEA,QAAAuJ,CAASvF,GACL,OAAOnE,KAAKmJ,YAAYzH,IAAIyC,EAChC,CACA,OAAA/C,CAAQ+C,EAAUwF,GAEd,IAAIC,EAAM5J,KAAK0J,SAASvF,GAKxB,OAHIyF,IACAA,EAAM5J,KAAK6J,cAAc1F,EAAIwF,IAE1BC,CACX,CAEA,cAAIzD,GACA,OAAOnG,KAAKmJ,WAChB,E,4pBC3CG,MAAMW,UAAgBpC,EAUzB,WAAA7H,CAAYsE,GACR3D,MAAM2D,GARV,mBACA,mBAQI,EAAAnE,KAAI,EAAa,EAAC,KAClB,EAAAA,KAAI,EAAa,EAAC,KAClBA,KAAKgI,cAAgBP,EAAcb,OACvC,CAEA,gBAAMmC,GAEF,OAAO7I,QAAQC,SAAQ,EAC3B,CAEA,YAAAkH,CAAaC,GAET9G,MAAM6G,aAAaC,GAEnB,EAAAtH,KAAI,EAAasH,EAAOyC,SAAkB,KAC1C,EAAA/J,KAAI,EAAasH,EAAO0C,SAAkB,IAC9C,CAEA,YAAID,GACA,OAAO,EAAA/J,KAAI,MACf,CACA,YAAIgK,GACA,OAAO,EAAAhK,KAAI,MACf,E,4BAjCO,EAAAiJ,UAAYxG,EAAA,EAASE,UCLzB,MAAMsH,UAAiBjD,EAAA,EAI5B,WAAAnH,CAAYsE,EAAUrE,EAAeyH,EAAsB,GAAIC,EAAkB,IAC/EhH,MAAM2D,EAAIrE,EAAMyH,EAAaC,GAC7BxH,KAAKkK,aAAe,CAAEC,SAAU,GAAIC,UAAW,GACjD,CAEA,gBAAMrB,GACJ,OAAO7I,QAAQC,SAAQ,EACzB,CAEA,YAAAkH,CAAaC,GAEX9G,MAAM6G,aAAaC,GAEnBtH,KAAKkK,aAAaC,SAAW7C,EAAO6C,SACpCnK,KAAKkK,aAAaE,UAAY9C,EAAO8C,SACvC,CAEA,eAAIC,GACF,OAAOrK,KAAKkK,YACd,EArBO,EAAAjB,UAAYxG,EAAA,EAASC,UCD9B,MAAMC,EAAY,ICDX,cAA0BuG,EAE7B,WAAArJ,GACIW,OACJ,CAEA,cAAAiJ,CAAeD,GAEXA,EAAWc,SAAQC,IACfvK,KAAKoB,QAAQmJ,EAAQpG,GAAYoG,EAAuB,GAEhE,CAYA,aAAAV,CAAc1F,EAAUqG,GACpB,MAAM5D,EAAU,IAAIkD,EAAQ3F,GAQ5B,OAPGqG,EACC5D,EAAQS,aAAamD,GAErB5D,EAAQmC,aAEZ/I,KAAKmG,WAAWsE,IAAItG,EAAIyC,GAEjBA,CACX,GD/BElE,EAAY,IEDX,cAA2BwG,EAE9B,WAAArJ,GACIW,OACJ,CAWA,cAAAiJ,CAAeD,GAEXA,EAAWc,SAAQC,IACfvK,KAAKoB,QAAQmJ,EAAQpG,GAAYoG,EAAuB,GAGhE,CAgBA,aAAAV,CAAc1F,EAAUqG,GACpB,MAAM9E,EAAW,IAAIuE,EAAS9F,GAQ9B,OAPGqG,EACC9E,EAAS2B,aAAamD,GAEtB9E,EAASqD,aAEb/I,KAAKmG,WAAWsE,IAAItG,EAAIuB,GAEjBA,CACX,GF7CE9C,EAAa,IGAZ,cAA4BsG,EAI/B,WAAArJ,GACIW,QACAR,KAAK0K,cAAgB,IAAIC,GAC7B,CAEA,cAAAlB,CAAeD,GAEXA,EAAWc,SAAQC,IACfvK,KAAKoB,QAAQmJ,EAAQpG,GAAYoG,EAAuB,GAEhE,CAYA,aAAAV,CAAc1F,EAAUqG,GACpB,MAAM1B,EAAY,IAAID,EAAU1E,GAQhC,OAPGqG,EACC1B,EAAUzB,aAAamD,GAEvB1B,EAAUC,aAEd/I,KAAKmG,WAAWsE,IAAItG,EAAI2E,GAEjBA,CACX,CAEA,uBAAMnC,CAAkBxC,GAEpB,OAAO,KAAOnC,iBAAiBS,EAAA,EAASG,WAAY,YAAa,CAAC6D,OAAOtC,KACpE9B,MAAMuI,GAAa5K,KAAKyJ,eAAemB,KACvCvI,MAAK,KAAM,IACXgE,OAAM,KAAM,GACrB,CAEA,0BAAMwE,CAAqBzH,GACvB,OAAGA,EAAKiB,WACGrE,KAAK8K,2BAA2B1H,GAEhCpD,KAAKuE,+BAA+BnB,EACnD,CAEA,gCAAM0H,CAA2B1H,GAE7B,OAAO,KAAOpB,iBAAiBS,EAAA,EAASsI,cAAe,SAAU,CAAC5F,OAAO/B,EAAKe,MACzE9B,MAAMuI,IACH,MAAMI,EAAQJ,EAASzC,KAAInF,GAAMA,EAAGiI,cACpC,OAAO,KAAOjJ,iBAAiBS,EAAA,EAASG,WAAY,KAAMoI,EAAM,IAEnE3I,MAAMuI,IACH5K,KAAKyJ,eAAemB,GACbA,KAEVvI,MAAMuI,IACHA,EAASN,SAAQtH,IACbhD,KAAK0K,cAAcQ,IAAIlI,EAAGmB,GAAW,GACvC,IAEL9B,MAAK,KAAM,IACXgE,OAAM,KAAM,GACrB,CAEA,oCAAM9B,CAA+BnB,GAIjC,OAFApD,KAAK0K,cAAcS,QAEf/H,EAAKiB,WAEF,KAAezD,WACjByB,MAAMuI,IACH,MAAMI,EAAQJ,EAASzC,KAAIhE,GAAMA,IACjC,OAAO,KAAOnC,iBAAiBS,EAAA,EAASG,WAAY,KAAMoI,EAAM,IAEnE3I,MAAMuI,IACH5K,KAAKyJ,eAAemB,GACbA,KAEVvI,MAAMuI,IACHA,EAASN,SAAQtH,IACbhD,KAAK0K,cAAcQ,IAAIlI,EAAGmB,GAAW,GACvC,IAEL9B,MAAK,KAAM,IACXgE,OAAM,KAAM,IAjBWnG,QAAQC,SAAQ,EAkBhD,CAEA,kCAAMiL,CAA6BhI,EAAYiI,EAAmBC,GAC3DA,EACCtL,KAAK0K,cAAcQ,IAAIG,GAEvBrL,KAAK0K,cAAca,OAAOF,GAK1B,KAAerK,WAAWiF,MAAMC,KAAKlG,KAAK0K,eAClD,CAEA,gBAAI7D,GACA,OAAO7G,KAAK0K,aAChB,GH7GStC,EAAU,IAAIgB,IAE3BhB,EAAQqC,IAAIhI,EAAA,EAASE,UAAWA,GAChCyF,EAAQqC,IAAIhI,EAAA,EAASC,UAAWA,GAChC0F,EAAQqC,IAAIhI,EAAA,EAASG,WAAYA,E,gBIfjC,IAAYH,E,iBAAZ,SAAYA,GACR,6BACA,6BACA,+BACA,+BACA,qCACA,mCACA,yCACA,qBACA,qBACA,yBACA,iCACH,CAZD,CAAYA,IAAAA,EAAQ,I,gBCApB,IAAYqF,E,iBAAZ,SAAYA,GACR,gBAAoB,eAAa,cACjC,eAAmB,cAAY,aAC/B,sBAA0B,qBAAmB,oBAC7C,QAAY,OAAK,MACjB,eAAmB,cAAY,aAC/B,gBAAoB,eAAa,aACpC,CAPD,CAAYA,IAAAA,EAAe,KASpB,MAAM0D,EAA6B,IAAIpC,IAA6B,CACvE,CAACtB,EAAgB2D,YAAa,oBAC9B,CAAC3D,EAAgB4D,WAAY,oBAC7B,CAAC5D,EAAgB6D,kBAAmB,mBACpC,CAAC7D,EAAgB8D,IAAK,OACtB,CAAC9D,EAAgB+D,WAAY,YAC7B,CAAC/D,EAAgBgE,YAAa,e,gBCflC,IAAYC,E,iBAAZ,SAAYA,GACR,WAAe,UAAQ,SACvB,eAAmB,cAAY,aAC/B,eAAmB,cAAY,aAC/B,iBAAqB,gBAAc,eACnC,aAAiB,YAAU,UAC9B,CAND,CAAYA,IAAAA,EAAgB,KAQrB,MAAMC,EAAyB,IAAI5C,IAA8B,CACpE,CAAC2C,EAAiBE,OAAQ,UAC1B,CAACF,EAAiBG,WAAY,OAC9B,CAACH,EAAiBI,WAAY,OAC9B,CAACJ,EAAiBK,aAAc,OAChC,CAACL,EAAiBM,SAAU,O,gECPzB,MAAMC,UAAa,IAOxB,WAAAzM,CAAYkE,EAAaD,EAAgB,GAAIE,EAAmB,GAAIlE,EAAe,GAAIyH,EAAsB,GAAIC,EAAkB,IAEjIhH,MAAMuD,EAAOjE,EAAMyH,EAAaC,GAEhCxH,KAAKuM,OAASxI,EACd/D,KAAKwM,OAAS1I,EACd9D,KAAKyM,UAAYzI,EACjBhE,KAAK0M,aAAc,CACrB,CAEA,gBAAM3D,GACJ,OAAO7I,QAAQC,SAAQ,EACzB,CAEA,eAAMqF,GACJ,OAAIxF,KAAKwM,QAAWxM,KAAKuM,OAGlB,KAAOvK,iBAAiB,IAASa,MAAO,KAAM,CAACsC,OAAOnF,KAAKuM,UAC7DlK,MAAKuI,IAEEA,EAAS1G,QACT,KAAOpD,SAAS,CAAC,CACb,GAAMd,KAAKuM,OACX,MAASvM,KAAKwM,OACd,KAAQxM,KAAKkH,MACb,SAAYlH,KAAKyM,YACjB,IAAS5J,OAEjB,MAAM8J,EAAuB/B,EAAS,GAmBtC,OAlBA5K,KAAK0M,YAAcC,EAAQ3I,WAAahE,KAAKyM,UAC1CzM,KAAK0M,cACA1M,KAAKwM,SACLxM,KAAKwM,OAASG,EAAQ7I,OACtB9D,KAAKuM,SACLvM,KAAKuM,OAASI,EAAQ5I,OACtB/D,KAAKkH,QACLlH,KAAKkH,MAAQyF,EAAQ7M,OAG7B,KAAYgB,SAAS,CAAC,CAClB,GAAMd,KAAKuM,OACX,MAASvM,KAAKwM,OACd,KAAQxM,KAAKkH,MACb,SAAYlH,KAAKyM,UACjB,WAAczM,KAAK0M,eAGhB1M,KAAK0M,WAAW,IAG1BrK,MAAKuK,GAAQA,IACbvG,OAAMuG,IAAQ,IApCR1M,QAAQC,SAAQ,EAqC3B,CAEA,SAAI4D,GACA,OAAO/D,KAAKuM,MAChB,CAEA,SAAIzI,GACA,OAAO9D,KAAKwM,MAChB,CAEA,cAAInI,GACA,OAAOrE,KAAK0M,WAChB,CAEA,cAAIrI,CAAWwI,GACX7M,KAAK0M,YAAcG,CACvB,EAvEK,EAAA5D,UAAY,IAASpG,K,wFCCxBiK,EAAaxJ,SAASyJ,cAAc,YACpCC,EAAiB1J,SAASyJ,cAAc,YAC9CD,EAAWG,U,mDACXD,EAAeC,U,u8BAER,MAAMC,UAAoB,KAC/B,MAAAC,GAEE,MAAMC,EAAiBhF,EAAA,EAAQ1G,IAAIe,EAAA,EAASE,YAA4BwD,WAAWzE,IAAI+E,OAAOzG,KAAKqN,WAAW3G,OAAOF,aAAa1G,KAElI,IAAIE,KAAKqN,WAAWC,eAAiBtN,KAAKqN,WAAWC,aAAahH,UAChE,OAAOwG,EAAWS,QAAQC,WAAU,GAOtC,MAAMC,EAAuCzN,KAAKqN,WAAWC,aAAahH,UAA0B6B,KAAKnF,IACvG,MAAM0K,EAAsBV,EAAeO,QAAQC,WAAU,GAEvDG,EAAaD,EAAoBhK,cAAc,wBACrDiK,EAAWC,QAAQC,QAAU7K,EAAGmB,GAEhCwJ,EAAWlJ,YAAe2D,EAAA,EAAQ1G,IAAIe,EAAA,EAASG,YAA8BiE,aAAaC,IAAI9D,EAAGmB,IAAM,gBAAkB,WAEpHnE,KAAKqN,WAAYC,aAAclK,KAAciB,YAChDsJ,EAAWnJ,aAAa,WAAY,IAEtCmJ,EAAW9H,iBAAiB,SAAUb,IACpC,MAAM6I,EAAUpH,OAAQzB,EAAM8I,OAAuBF,QAAQC,SACvDE,EAAc3F,EAAA,EAAQ1G,IAAIe,EAAA,EAASG,YAA8BiE,aAAaC,IAAI9D,EAAGmB,IAC3FwJ,EAAWlJ,YAAcsJ,EAAa,WAAa,gBAClD3F,EAAA,EAAQ1G,IAAIe,EAAA,EAASG,YAA8BwI,6BAA6BpL,KAAKqN,WAAYC,aAAclK,KAAcyK,GAAUE,EAAW,IAKrJ,MAAMC,EAAgBN,EAAoBhK,cAAc,+BAClDuK,EAAiBP,EAAoBhK,cAAc,kCACnDwK,EAAUR,EAAoBhK,cAAc,yBAC5CyK,EAAUT,EAAoBhK,cAAc,yBAC5C0K,EAAsBV,EAAoBhK,cAAc,qCAGxD2K,EAAgBX,EAAoBhK,cAAc,+BAClD4K,EAAoBZ,EAAoBhK,cAAc,mCAW5D,GANIV,EAAGyF,cACLuF,EAAcvJ,YAAc,IAAuB/C,IAAIsB,EAAGyF,cAAgB,MAC5EwF,EAAexJ,YAAc,GAAGzB,EAAG4F,aAAe,EAClDsF,EAAQzJ,YAAc,SAASzB,EAAG2E,SAClCyG,EAAoB3J,YAAc,eAAezB,EAAG2F,mBAAmB4F,cAAgB,EACvFJ,EAAQ1J,YAAc,SAASzB,EAAGgG,QAC/BhG,EAAG8E,gBAAgB5D,OAAO,CAC3B,MAAMsK,EAAUxL,EAAG8E,gBAAgBK,KAAIsG,GAAO3G,EAAA,EAA2BpG,IAAI+M,KAC7EH,EAAkBrB,UAAY,SAASuB,EAAQE,KAAK,yBACxD,CAIE,OAFAL,EAAc5J,YAAczB,EAAGuE,YAExBmG,CAAmB,IAItBiB,EAAkB7B,EAAWS,QAAQC,WAAU,GAC/CoB,EAAUD,EAAgBjL,cAAc,oBACxCmL,EAAcvL,SAASyJ,cAAc,MAI3C,OAHA8B,EAAYpK,YAAc2I,EAC1BwB,EAAQhJ,YAAYiJ,GACpBD,EAAQE,UAAUrB,GACXkB,CACT,E,2FCpFcrL,SAASyJ,cAAc,YAC/BE,U,+ICIFH,EAAaxJ,SAASyJ,cAAc,YACpCC,EAAiB1J,SAASyJ,cAAc,YAC9CD,EAAWG,U,qDACXD,EAAeC,U,wlBASR,MAAM8B,UAAsB,KACjC,MAAA5B,GAEE,IAAInN,KAAKqN,WAAWC,eAAiBtN,KAAKqN,WAAWC,aAAatH,YAChE,OAAO8G,EAAWS,QAAQC,WAAU,GAOtC,MAAMC,EAAuCzN,KAAKqN,WAAWC,aAAatH,YAA0BmC,KAAKnF,IAEvG,MAAMgM,EAAQhC,EAAeO,QAAQC,WAAU,GACzCyB,EAAQD,EAAMtL,cAAc,qBAC5BwL,EAAYF,EAAMtL,cAAc,YAChCyL,EAASH,EAAMtL,cAAc,sBAC7B0L,EAAaJ,EAAMtL,cAAc,0BACjC2L,EAAWL,EAAMtL,cAAc,wBAOpC,OANDwL,EAAU1K,aAAa,OAAQ,aAAaxB,EAAGmB,MAC/CgL,EAAO1K,YAAczB,EAAGlD,KACxBsP,EAAW3K,YAAczB,EAAG0C,UAAU5F,MAAQ,KAC9CuP,EAAS5K,YAAc,SAASzB,EAAG+G,eAAe/G,EAAGgH,YACrDiF,EAAMzK,aAAa,MAAOxB,EAAGwE,SAErBwH,CAAK,IAITA,EAAQlC,EAAWS,QAAQC,WAAU,GAE3C,OADAwB,EAAMtL,cAAc,sBAAuBoL,UAAUrB,GAC9CuB,CACT,E,OClDK,MAAMM,UAAoB,KAE/B,MAAAnC,GACE,MAAMI,EAAUjK,SAASyJ,cAAc,OAIvC,OAFAQ,EAAQ9I,YAAc,YAAYzE,KAAKqN,WAAW3G,OAAO6I,YAElDhC,CACT,E,8CCEI,EAAajK,SAASyJ,cAAc,YACpC,EAAiBzJ,SAASyJ,cAAc,YAC9C,EAAWE,U,mDACX,EAAeA,U,u8BAER,MAAMuC,UAAsB,KACjC,MAAArC,GAIE,GAFuB/E,EAAA,EAAQ1G,IAAIe,EAAA,EAASE,YAA4BwD,WAAWzE,IAAI+E,OAAOzG,KAAKqN,WAAW3G,OAAOF,aAEjHxG,KAAKqN,WAAWC,eAAiBtN,KAAKqN,WAAWC,aAAahH,UAChE,OAAO,EAAWiH,QAAQC,WAAU,GAOtC,MAAMC,EAAuCzN,KAAKqN,WAAWC,aAAahH,UAA0B6B,KAAKnF,IACvG,MAAM0K,EAAsB,EAAeH,QAAQC,WAAU,GAEvDG,EAAaD,EAAoBhK,cAAc,wBACrDiK,EAAWC,QAAQC,QAAU7K,EAAGmB,GAEhCwJ,EAAWlJ,YAAe2D,EAAA,EAAQ1G,IAAIe,EAAA,EAASG,YAA8BiE,aAAaC,IAAI9D,EAAGmB,IAAM,gBAAkB,WAEzHwJ,EAAW9H,iBAAiB,SAAUb,IACpC,MAAM6I,EAAUpH,OAAQzB,EAAM8I,OAAuBF,QAAQC,SACvDE,EAAc3F,EAAA,EAAQ1G,IAAIe,EAAA,EAASG,YAA8BiE,aAAaC,IAAI9D,EAAGmB,IAC3FwJ,EAAWlJ,YAAcsJ,EAAa,WAAa,gBAClD3F,EAAA,EAAQ1G,IAAIe,EAAA,EAASG,YAA8BwI,6BAA6BpL,KAAKqN,WAAYC,aAAclK,KAAcyK,GAAUE,EAAW,IAGrJ,MAAMC,EAAgBN,EAAoBhK,cAAc,+BAClDuK,EAAiBP,EAAoBhK,cAAc,kCACnDwK,EAAUR,EAAoBhK,cAAc,yBAC5CyK,EAAUT,EAAoBhK,cAAc,yBAC5C0K,EAAsBV,EAAoBhK,cAAc,qCAGxD2K,EAAgBX,EAAoBhK,cAAc,+BAClD4K,EAAoBZ,EAAoBhK,cAAc,mCAW5D,GANIV,EAAGyF,cACLuF,EAAcvJ,YAAc,IAAuB/C,IAAIsB,EAAGyF,cAAgB,MAC5EwF,EAAexJ,YAAc,GAAGzB,EAAG4F,aAAe,EAClDsF,EAAQzJ,YAAc,SAASzB,EAAG2E,SAClCyG,EAAoB3J,YAAc,eAAezB,EAAG2F,mBAAmB4F,cAAgB,EACvFJ,EAAQ1J,YAAc,SAASzB,EAAGgG,QAC/BhG,EAAG8E,gBAAgB5D,OAAO,CAC3B,MAAMsK,EAAUxL,EAAG8E,gBAAgBK,KAAIsG,GAAO3G,EAAA,EAA2BpG,IAAI+M,KAC7EH,EAAkBrB,UAAY,SAASuB,EAAQE,KAAK,yBACxD,CAME,OAJAL,EAAc5J,YAAczB,EAAGuE,YAIxBmG,CAAmB,IAItBiB,EAAkB,EAAWpB,QAAQC,WAAU,GAC/CoB,EAAUD,EAAgBjL,cAAc,oBACxCmL,EAAcvL,SAASyJ,cAAc,MAI3C,OAHA8B,EAAYpK,YAAc,kCAC1BmK,EAAQhJ,YAAYiJ,GACpBD,EAAQE,UAAUrB,GACXkB,CACT,EClFK,MAAMc,UAAoB,KAE/B,MAAAtC,GACE,MAAMI,EAAUjK,SAASyJ,cAAc,OAIvC,OAFAQ,EAAQ9I,YAAc,UAEf8I,CACT,ECRK,MAAMmC,UAAiB,KAE5B,MAAAvC,GACE,MAAMI,EAAUjK,SAASyJ,cAAc,OAIvC,OAFAQ,EAAQ9I,YAAc,OAEf8I,CACT,E,MCPI,EAAUjK,SAASyJ,cAAc,YACvC,EAAQE,U,0iGAQD,MAAM0C,UAAiB,KAC5B,MAAAxC,GACE,OAAO,EAAQI,QAAQC,WAAU,EACnC,E,oDCfK,MAAMoC,EAAa,IAAI,cAAwBC,c,oTCEtDC,eAAeC,OAAO,eAAa,EAAE,cAAyBC,kBAAzB,c,+BAiBrC,CAfE,iBAAAC,GACEjQ,KAAK6F,iBAAiB,QAAS,EAAA7F,KAAI,SACrC,CAEA,oBAAAkQ,GACElQ,KAAKmQ,oBAAoB,QAAS,EAAAnQ,KAAI,SACxC,G,yBAESgF,GACPA,EAAMC,iBACN2K,EAAWQ,cAAc,IAAIC,YAAY,WAAY,CACnDC,OAAQ,CAAEvQ,KAAM,IAAIwQ,IAAIvQ,KAAKwQ,MAAMC,YAEvC,E,GAEC,CAAEC,QAAS,M,kUCjBd,MAAMC,EAAyBrN,SAASyJ,cAAc,YACtD4D,EAAuB1D,UAAY,2KAUjC5H,OAGFyK,eAAeC,OAAO,iBAAe,EAAE,cAA2Ba,YAyBhE,WAAA/Q,GACEW,Q,YAzBO,WAAcR,KAAK6Q,aAAa,CAAEC,KAAM,UACxC,WAAUxN,SAASyJ,cAAc,QACjC,WAAQzJ,SAASyJ,cAAc,QACxC,mBAES,YAAmB,KAC1BgE,aAAa,EAAA/Q,KAAI,Q,+VACjB,CAAAA,KAAI,EAAYyF,YAAW,KACzBzF,KAAK4F,YAAY,EAAA5F,KAAI,OAAS,GAC7B,KAAyB,QAGrB,YAAoB,KAC3B,EAAAA,KAAI,SAAc,KAAlBA,KAAoB,IAGb,YAAkBgF,IACzB,MAAQsL,QAAQ,QAAE/C,IAAcvI,EAEhC,EAAAhF,KAAI,OAAOgR,gBAAgBzD,GAC3BvN,KAAK4F,YAAY,EAAA5F,KAAI,QACrB,EAAAA,KAAI,SAAc,KAAlBA,KAAoB,IAKpB,EAAAA,KAAI,OAAa4F,YAAY+K,EAAuBpD,QAAQC,WAAU,IACtE,EAAAxN,KAAI,OAASwE,aAAa,OAAQ,UAClC,EAAAxE,KAAI,OAAOwE,aAAa,OAAQ,QAChC,EAAAxE,KAAI,OAAS8O,UAAU9O,KAAKiR,WAC9B,CAEA,iBAAAhB,GACEL,EAAW/J,iBAAiB,gBAAiB,EAAA7F,KAAI,QACjD4P,EAAW/J,iBAAiB,cAAe,EAAA7F,KAAI,QAC/C4P,EAAW/J,iBAAiB,iBAAkB,EAAA7F,KAAI,OACpD,CAEA,oBAAAkQ,GACEN,EAAWO,oBAAoB,gBAAiB,EAAAnQ,KAAI,QACpD4P,EAAWO,oBAAoB,cAAe,EAAAnQ,KAAI,QAClD4P,EAAWO,oBAAoB,iBAAkB,EAAAnQ,KAAI,OACvD,G,6HAGE,EAAAA,KAAI,OAASkR,SACbH,aAAa,EAAA/Q,KAAI,OACnB,E,IChEK,MAAMmR,UAAqBhM,Q,MCE3B,MAAeiM,EAGpB,WAAAvR,CAAY0G,GAFH,mB,+VAGP,CAAAvG,KAAI,EAAUuG,EAAK,IACrB,CAEA,cAAc8G,GACZ,O,uSAAO,CAAArN,KAAI,MACb,CAIA,QAAAqR,GAEA,CAEA,SAAAC,GAEA,E,kVCJK,MAAMC,EAMX,WAAA1R,CAAY2R,G,YALH,WAAU,IAAIpI,KACd,WAAkB,IAAIqI,SACtB,WAAqB,IAAIA,SAClC,WAAmC,MAGjCD,EAAOlH,SAASoH,ICxBb,IAA0BC,EDyB3B,EAAA3R,KAAI,OAASyK,KCzBckH,EDyBOD,EAAM3R,KCxBrC,IAAI6R,OAAO,IAAMD,EAAaE,QAAQ,cAAc,CAACC,EAAGC,IACtD,MAAMA,cACV,MDsB8CL,EAAM,GAEzD,CAEA,QAAAM,CAASjS,EAAckS,GAAY,GACjC,MAAMC,GE9BkBC,EF8BSzM,SAAS+K,SE7BxC,MAAM2B,KAD4CC,EF8BAtS,GE5B7CsS,EAGF,IAAM,CAACF,EAAoB,IAAKE,GACpC3D,KAAK,IACL4D,MAAM,OACNC,QAAiB,CAACC,EAAWC,KACX,MAAbA,IAIa,OAAbA,EACFD,EAAUE,MACDD,GACTD,EAAUG,KAAKF,IANRD,IAUR,IACF9D,KAAK,MArBH,IAAqByD,EAA4BE,EF+BpD,MAAOX,EAAOhL,GAAU,EAAA1G,KAAI,SAAW,KAAfA,KAAgBkS,GAEpCR,GACG,EAAA1R,KAAI,SAAa,KAAjBA,KAAkBkS,EAAcR,EAAOhL,GAAU,CAAC,EAAGuL,EAE9D,CAEA,KAAAlL,GACE/G,KAAKgS,SAAStM,SAAS+K,UACvBmC,OAAO/M,iBAAiB,YAAab,IACnChF,KAAKgS,SAAShN,EAAMuB,MAAMxG,MAAQ2F,SAAS+K,UAAU,EAAK,IAE5Db,EAAW/J,iBAAiB,YAAab,IACvC,MAAOsL,QAAQ,KAACvQ,IAASiF,EAEzBhF,KAAKgS,SAASjS,EAAK,GAEvB,EAmHF,SAAS8S,EAAWhG,GAClB,MAAwB,mBAAVA,GAAwB,UAAUuF,KAAKvF,EAAM0B,WAC7D,C,iFAnHaxO,GACT,IAAK,MAAO+S,EAAQC,KAAgB,EAAA/S,KAAI,OAAU,CAChD,MAAMgT,EAAaF,EAAOG,KAAKlT,GAE/B,GAAIiT,EACF,MAAO,CAACD,EAAaC,EAAWE,QAAU,KAE9C,CAEA,MAAO,CAAC,KAAM,KAChB,EAAC,EAEDpO,eAAmB/E,EAAc2R,EAAoByB,EAAyBlB,GAC5E,MAAMmB,EAA2C,CAC/CC,IAAK,IAAI9C,IAAIxQ,EAAM2F,SAAS4N,QAAQ/E,WACpC7H,OAAQyM,EACR7F,aAAc,MAGhBsC,EAAWQ,cAAc,IAAIC,YAAY,kBAEzC,MAAMkD,QAAoB,EAAAvT,KAAI,SAAa,KAAjBA,KAAkB0R,EAAO0B,GAEnD,GAAKG,EAAL,CAKA,GAAIA,aAAuBpC,EACzB,OAAOnR,KAAKgS,SAASuB,EAAYhF,YAKnC,GAFA6E,EAAoB9F,mBAAqB,EAAAtN,KAAI,SAAgB,KAApBA,KAAqB0R,EAAO0B,GAEjE1B,EAAM8B,WACR,OAAOxT,KAAKgS,SAASN,EAAM8B,YAG7B,GAAI9B,EAAM5L,KAAM,CACd,MAAMA,EAAO,IAAI4L,EAAM5L,KAAKsN,GACtB7F,EAAUzH,EAAKqH,SAErB,EAAAnN,KAAI,QAAcsR,Y,+VAClB,CAAAtR,KAAI,EAAe8F,EAAI,KACvB8J,EAAWQ,cAAc,IAAIC,YAAY,cAAe,CACtDC,OAAQ,CAAC/C,cAEX,EAAAvN,KAAI,QAAcqR,WAEbY,GACHwB,QAAQC,UAAU,CAAC3T,QAAO,GAAIqT,EAAoBC,IAEtD,CA1BA,MAFEzD,EAAWQ,cAAc,IAAIC,YAAY,kBA8B7C,EAAC,EAEDvL,gBAAmB,OAACiB,GAAsBQ,GACxC,IAAKR,IAAWA,EAAO7B,OACrB,OAAO,EAGT,IAAK,MAAMyP,KAAS5N,EAAQ,CAC1B,MAAM6N,QAAe,EAAA5T,KAAI,SAAa,KAAjBA,KAAkB2T,EAAOpN,GAE9C,IAAe,IAAXqN,EACF,OAAOA,CAEX,CAEA,OAAO,CACT,EAAC,EAED9O,gBAAsB,QAAC3E,GAAuBoG,GAC5C,OAAKpG,EAIED,QACJ2T,IACCvK,OACGwK,QAAQ3T,GACRgI,KAAI,EAAErI,EAAMiU,KACJ,EAAA/T,KAAI,SAAgB,KAApBA,KAAqB+T,EAAUxN,GAAOlE,MAAMwK,GAAU,CAAC/M,EAAM+M,QAGzExK,MAAM2R,GAAkB1K,OAAO2K,YAAYD,KAXrC,IAYX,EAAC,WAEYL,EAAmCpN,GAC9C,OAAIsM,EAAQc,IACL,EAAA3T,KAAI,OAAiB8G,IAAI6M,IAC5B,EAAA3T,KAAI,OAAiByK,IAAIkJ,EAAO,IAAIA,GAG/B,EAAA3T,KAAI,OAAiB0B,IAAIiS,GAAQO,YAAY3N,IAG/CoN,EAAMpN,EACf,EAAC,EAEDzB,eAAsBiP,EAA4CxN,GAChE,OAAIsM,EAAQkB,IACL,EAAA/T,KAAI,OAAoB8G,IAAIiN,IAC/B,EAAA/T,KAAI,OAAoByK,IAAIsJ,EAAU,IAAIA,GAGrC,EAAA/T,KAAI,OAAoB0B,IAAIqS,GAAW5T,QAAQoG,IAGjDwN,EAASxN,EAClB,C,gBG7JK,SAAS4N,KAAwBC,GACpC,OAAQvH,IACJ,IAAI,MAAMwH,KAAaD,EAAW,CAC9B,MAAMR,EAASS,EAAUxH,GAEzB,GAAI+G,EACA,OAAOA,CAGf,CAEA,OAAO,IAAI,CAEnB,C,iUCPO,MAAMU,EAGT,WAAAzU,CAAY0U,GAFH,mB,+VAIL,CAAAvU,KAAI,EAAkB,IAAIoJ,IAAK,KAC/B,IAAI,MAAOoL,EAAK3H,KAAUvD,OAAOwK,QAAQS,GACrC,EAAAvU,KAAI,OAAgByK,IAAI+J,EAAKL,KAAqBtH,GAE1D,CAEA,QAAAtH,CAAS7E,GAEL,MAAM4E,EAAsC,GAE5C,IAAK,MAAOmP,EAAa5H,KAAUvD,OAAOwK,QAAQpT,GAAM,CACpD,MAAM2T,EAAY,EAAArU,KAAI,OAAgB0B,IAAI+S,GAE1C,GAAGJ,EAAU,CACT,MAAMT,EAASS,EAAUxH,GACrB+G,GACAtO,EAAOqN,KAAK,CAAC,CAAC8B,GAAcb,GAEpC,CACJ,CAEA,OAAOtO,EAAOpB,OAASoF,OAAOoL,OAAO,CAAC,KAAMpP,GAAU,IAC1D,E,iEClCG,MAAMqP,EAA2C9H,GAC7CA,EAAMxH,OAAOnB,OAAS,KAAO,CAACyQ,aAAc,oCAG1CC,EAAyC/H,IAC1CA,EAAMxH,OAAOnB,QAAW,iCAAiCkO,KAAKvF,GAAS,KAAO,CAAC8H,aAAc,2BAG5FE,EAAyChI,GAC3C,8BAA8BuF,KAAKvF,GAAS,KAAO,CAAC8H,aAAc,2B,gBCRtE,SAASG,EAAcxR,EAAoBgC,GAE9C,GAAKA,EAGL,IAAK,MAAMkP,KAAOlP,EACdyP,EAAazR,EAAUgC,EAAQkP,EAEvC,CAEO,SAASQ,EAAc1R,GAE1B,MAAM2R,EAAc3R,EAAS4R,iBAAiB,eAE9C,IAAK,MAAMC,KAAOF,EACdE,EAAIlI,UAAY,EAGxB,CAEO,SAAS8H,EAAazR,EAAoBgC,EAAuD8P,GAEpG,MAAMC,EAAQ/R,EAASoB,eAAe0Q,EAAU,SAChD,GAAIC,GAEC/P,EAEL,IAAK,MAAMgQ,KAAYhQ,EAAO8P,GAAsC,CAChE,MAAMD,EAAM7P,EAAO8P,GAEnB,IAAKD,IAAQA,EAAIG,GAAW,SAE5B,MAAMC,EAAYC,EAAmBL,EAAIG,IACzCD,EAAMzP,YAAY2P,EACtB,CACJ,CAEO,SAASC,EAAmBL,GAE/B,MAAMnS,EAAKM,SAASyJ,cAAc,MAGlC,OAFA/J,EAAGyB,YAAc0Q,EACjBnS,EAAG2B,MAAM8Q,MAAQ,MACVzS,CACX,C,sCC7CI0S,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB/N,IAAjBgO,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,C1CtBItW,EAAkC,mBAAXyW,OAAwBA,OAAO,kBAAoB,qBAC1ExW,EAAmC,mBAAXwW,OAAwBA,OAAO,mBAAqB,sBAC5EvW,EAAiC,mBAAXuW,OAAwBA,OAAO,iBAAmB,oBACxEtW,EAAgBuW,IAChBA,GAASA,EAAMC,EAAI,IACrBD,EAAMC,EAAI,EACVD,EAAM5L,SAAS8L,GAAQA,EAAGC,MAC1BH,EAAM5L,SAAS8L,GAAQA,EAAGC,IAAMD,EAAGC,IAAMD,MAC1C,EAyBDT,EAAoBW,EAAI,CAACP,EAAQQ,EAAMC,KACtC,IAAIN,EACJM,KAAcN,EAAQ,IAAIC,GAAK,GAC/B,IAEIM,EACAC,EACAC,EAJAC,EAAY,IAAIjM,IAChBmL,EAAUC,EAAOD,QAIjBe,EAAU,IAAI3W,SAAQ,CAACC,EAAS2W,KACnCH,EAASG,EACTJ,EAAevW,CAAO,IAEvB0W,EAAQpX,GAAkBqW,EAC1Be,EAAQrX,GAAkB4W,IAAQF,GAASE,EAAGF,GAAQU,EAAUtM,QAAQ8L,GAAKS,EAAe,OAAEE,SAC9FhB,EAAOD,QAAUe,EACjBN,GAAMS,IAEL,IAAIZ,EADJK,EAvCa,CAACO,GAAUA,EAAK7O,KAAK8O,IACnC,GAAW,OAARA,GAA+B,iBAARA,EAAkB,CAC3C,GAAGA,EAAIzX,GAAgB,OAAOyX,EAC9B,GAAGA,EAAI5U,KAAM,CACZ,IAAI6T,EAAQ,GACZA,EAAMC,EAAI,EACVc,EAAI5U,MAAMgU,IACTzM,EAAInK,GAAkB4W,EACtB1W,EAAauW,EAAM,IAChBgB,IACHtN,EAAIlK,GAAgBwX,EACpBvX,EAAauW,EAAM,IAEpB,IAAItM,EAAM,CAAC,EAEX,OADAA,EAAIpK,GAAkB4W,GAAQA,EAAGF,GAC1BtM,CACR,CACD,CACA,IAAIuN,EAAM,CAAC,EAGX,OAFAA,EAAI3X,GAAiBuX,MACrBI,EAAI1X,GAAkBwX,EACfE,CAAG,IAkBKC,CAASJ,GAEvB,IAAIK,EAAY,IAAOZ,EAAYtO,KAAKgO,IACvC,GAAGA,EAAEzW,GAAe,MAAMyW,EAAEzW,GAC5B,OAAOyW,EAAE1W,EAAe,IAErBoX,EAAU,IAAI3W,SAASC,KAC1BiW,EAAK,IAAOjW,EAAQkX,IACjBhB,EAAI,EACP,IAAIiB,EAAWC,GAAOA,IAAMrB,IAAUU,EAAU9P,IAAIyQ,KAAOX,EAAU1L,IAAIqM,GAAIA,IAAMA,EAAEpB,IAAMC,EAAGC,IAAKkB,EAAE5E,KAAKyD,KAC1GK,EAAYtO,KAAK8O,GAASA,EAAIzX,GAAe8X,IAAU,IAExD,OAAOlB,EAAGC,EAAIQ,EAAUQ,GAAW,IAChClC,IAAUA,EAAMwB,EAAOE,EAAQnX,GAAgByV,GAAOuB,EAAaZ,GAAWnW,EAAauW,MAC/FA,GAASA,EAAMC,EAAI,IAAMD,EAAMC,EAAI,EAAE,E2C9DtCR,EAAoBQ,EAAI,CAACL,EAAS0B,KACjC,IAAI,IAAIhD,KAAOgD,EACX7B,EAAoB8B,EAAED,EAAYhD,KAASmB,EAAoB8B,EAAE3B,EAAStB,IAC5ElL,OAAOoO,eAAe5B,EAAStB,EAAK,CAAEmD,YAAY,EAAMjW,IAAK8V,EAAWhD,IAE1E,ECNDmB,EAAoBiC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO7X,MAAQ,IAAI8X,SAAS,cAAb,EAChB,CAAE,MAAOZ,GACR,GAAsB,iBAAXtE,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxB+C,EAAoB8B,EAAI,CAAC7N,EAAKmO,IAAUzO,OAAO0O,UAAUC,eAAeC,KAAKtO,EAAKmO,G,MCAlF,IAAII,EACAxC,EAAoBiC,EAAEQ,gBAAeD,EAAYxC,EAAoBiC,EAAElS,SAAW,IACtF,IAAIpC,EAAWqS,EAAoBiC,EAAEtU,SACrC,IAAK6U,GAAa7U,IACbA,EAAS+U,gBACZF,EAAY7U,EAAS+U,cAAcC,MAC/BH,GAAW,CACf,IAAII,EAAUjV,EAASkV,qBAAqB,UAC5C,GAAGD,EAAQrU,OAEV,IADA,IAAIuU,EAAIF,EAAQrU,OAAS,EAClBuU,GAAK,IAAMN,GAAWA,EAAYI,EAAQE,KAAKH,GAExD,CAID,IAAKH,EAAW,MAAM,IAAIO,MAAM,yDAChCP,EAAYA,EAAUtG,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpF8D,EAAoBgD,EAAIR,C,KCfExC,EAAoB,I","sources":["webpack://spa-with-router/webpack/runtime/async module","webpack://spa-with-router/./src/dataBase/DataBase.ts","webpack://spa-with-router/./src/dataBase/BrowserLocalStorage.ts","webpack://spa-with-router/./src/dataBase/serviceDB.ts","webpack://spa-with-router/./src/dataBase/FireBaseDB.ts","webpack://spa-with-router/./src/index.ts","webpack://spa-with-router/./src/models/abstracts/ObjectDB.ts","webpack://spa-with-router/./src/models/listsAndEnums/propertyTypes.ts","webpack://spa-with-router/./src/models/abstracts/Property.ts","webpack://spa-with-router/./src/models/abstracts/ResidentialProperty.ts","webpack://spa-with-router/./src/models/apartment/Apartment.ts","webpack://spa-with-router/./src/models/abstracts/ObjectList.ts","webpack://spa-with-router/./src/models/complex/Complex.ts","webpack://spa-with-router/./src/models/location/Location.ts","webpack://spa-with-router/./src/models/listsAndEnums/dataMap.ts","webpack://spa-with-router/./src/models/complex/ComplexList.ts","webpack://spa-with-router/./src/models/location/LocationList.ts","webpack://spa-with-router/./src/models/apartment/ApartmentList.ts","webpack://spa-with-router/./src/models/listsAndEnums/dbTables.ts","webpack://spa-with-router/./src/models/listsAndEnums/propertyOptions.ts","webpack://spa-with-router/./src/models/listsAndEnums/roomsNumberTypes.ts","webpack://spa-with-router/./src/models/user/User.ts","webpack://spa-with-router/./src/pages/complex/ComplexPage.ts","webpack://spa-with-router/./src/pages/ProductsPage.ts","webpack://spa-with-router/./src/pages/complexes/ComplexesPage.ts","webpack://spa-with-router/./src/pages/ProductPage.ts","webpack://spa-with-router/./src/pages/favorite/FavoritesPage.ts","webpack://spa-with-router/./src/pages/HistoryPage.ts","webpack://spa-with-router/./src/pages/CartPage.ts","webpack://spa-with-router/./src/pages/home/HomePage.ts","webpack://spa-with-router/./src/router/constants/ROUTER_BUS.ts","webpack://spa-with-router/./src/router/elements/RouterLink.ts","webpack://spa-with-router/./src/router/elements/RouterOutlet.ts","webpack://spa-with-router/./src/router/models/RedirectPath.ts","webpack://spa-with-router/./src/router/models/AbstractPage.ts","webpack://spa-with-router/./src/router/Router.ts","webpack://spa-with-router/./src/router/utils/createPathRegExp.ts","webpack://spa-with-router/./src/router/utils/resolvePath.ts","webpack://spa-with-router/./src/service/validator/composeValidators.ts","webpack://spa-with-router/./src/service/validator/FormValidator.ts","webpack://spa-with-router/./src/service/validator/Validators.ts","webpack://spa-with-router/./src/service/validator/serviceFunctions.ts","webpack://spa-with-router/webpack/bootstrap","webpack://spa-with-router/webpack/runtime/define property getters","webpack://spa-with-router/webpack/runtime/global","webpack://spa-with-router/webpack/runtime/hasOwnProperty shorthand","webpack://spa-with-router/webpack/runtime/publicPath","webpack://spa-with-router/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import { dbTables } from \"../models/listsAndEnums/dbTables\";\r\nimport { idDB } from \"../models/interfacesAndTypes/idDB\";\r\nimport { tableDB } from \"../models/interfacesAndTypes/tableDB\";\r\nimport { tableFieldValue } from \"../models/interfacesAndTypes/tableFieldValue\";\r\n\r\nexport abstract class DataBase{\r\n    protected _ready: Promise<boolean>;\r\n    readonly #path: string; \r\n    readonly #name: string;\r\n\r\n    constructor(name: string, path: string){\r\n        this._ready = Promise.resolve(false);\r\n        this.#path = path;\r\n        this.#name = name;\r\n        open();\r\n    }\r\n\r\n    open(): void{\r\n        this._ready = this.init();\r\n    };\r\n\r\n    abstract init(): Promise<boolean>;\r\n\r\n    abstract get(table: dbTables, id?: idDB): Promise<tableDB>;\r\n\r\n    abstract getAll(table?: dbTables): Promise<tableDB>;\r\n\r\n    abstract writeAll(data: tableDB, table?: dbTables): Promise<boolean>;\r\n\r\n    abstract getByQuery(query: string): Promise<tableDB>;\r\n\r\n    abstract getByForeignKeys(table: dbTables, fieldName: string, foreignKeys: tableFieldValue[]): Promise<tableDB>;\r\n\r\n    abstract getNewRecords(table: dbTables, existedId: idDB[]): Promise<tableDB | undefined>;\r\n\r\n    get ready(): Promise<boolean>{\r\n        return this._ready;\r\n    }\r\n\r\n    get path(): string{\r\n        return this.#path;\r\n    }\r\n\r\n    get name(): string{\r\n        return this.#name;\r\n    }\r\n\r\n}","import { idDB } from \"../models/interfacesAndTypes/idDB\";\r\nimport { tableDB } from \"../models/interfacesAndTypes/tableDB\";\r\nimport { tableFieldValue } from \"../models/interfacesAndTypes/tableFieldValue\";\r\nimport { dbTables } from \"../models/listsAndEnums/dbTables\";\r\nimport { DataBase } from \"./DataBase\";\r\n\r\nexport class BrowserLocalStorage extends DataBase {\r\n  constructor(name: string, path: string) {\r\n    super(name, path);\r\n  }\r\n\r\n  async init(): Promise<boolean> {\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  async getAll(): Promise<tableDB> {\r\n    await this._ready;\r\n    const data = this.extractDataFromStorage();\r\n    return Promise.resolve(data ?? []);\r\n  }\r\n\r\n  async getArray(): Promise<Array<idDB>> {\r\n    await this._ready;\r\n    const data = this.extractArrayFromStorage();\r\n    return Promise.resolve(data ?? []);\r\n  }\r\n\r\n  async writeAll(data: tableDB): Promise<boolean> {\r\n    await this.ready;\r\n    // const dataStorage = this.extractDataFromStorage();\r\n\r\n    this.saveDataToStorage(data);\r\n\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  async writeArray(data: Array<idDB>): Promise<boolean> {\r\n    await this.ready;\r\n    // const dataStorage = this.extractArrayFromStorage();\r\n\r\n    this.saveDataToStorage(data);\r\n\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  async delete(): Promise<void> {\r\n    await this.ready;\r\n    localStorage.removeItem(this.path + \"/\" + this.name);\r\n  }\r\n\r\n  private extractDataFromStorage(): tableDB | null{\r\n    const storageData = localStorage.getItem(this.path + \"/\" + this.name);\r\n\r\n    return storageData ? JSON.parse(storageData) : null;\r\n  }\r\n\r\n  private extractArrayFromStorage(): Array<idDB> | null{\r\n    const storageData = localStorage.getItem(this.path + \"/\" + this.name);\r\n\r\n    return storageData ? JSON.parse(storageData) : null;\r\n  }\r\n\r\n  private saveDataToStorage(data: tableDB | Array<idDB>): void {\r\n    const jsonData = JSON.stringify(data);\r\n    localStorage.setItem(this.path + \"/\" + this.name, jsonData);\r\n  }\r\n\r\n  get(table: dbTables): Promise<tableDB> {\r\n    return Promise.resolve([{}]);\r\n  }\r\n\r\n  getByQuery(query: string): Promise<tableDB> {\r\n    return Promise.resolve([{}]);\r\n  }\r\n\r\n  getNewRecords(table: dbTables, existedId: idDB[]): Promise<tableDB> {\r\n    return Promise.resolve([{}]);\r\n  }\r\n\r\n  getByForeignKeys(table: dbTables, fieldName: string, foreignKeys: tableFieldValue[]): Promise<tableDB> {\r\n    return Promise.resolve([{}]);\r\n  }\r\n}\r\n","import { FireBaseDB } from \"./FireBaseDB\";\r\nimport { BrowserLocalStorage } from './BrowserLocalStorage';\r\n\r\nexport const currDB = new FireBaseDB('test', 'testPath');\r\nexport const userStorage = new BrowserLocalStorage('user', 'cyprus');\r\nexport const favPropStorage = new BrowserLocalStorage('favProp', 'cyprus');\r\n\r\n// export abstract class ServiceDB{\r\n\r\n//     private static _currDB: DataBase = new FireBaseDB('test', 'testPath');\r\n\r\n//     static async openConnection(){\r\n//         ServiceDB._currDB.open();\r\n//     }\r\n\r\n//     static get currDB(): DataBase{\r\n//         return ServiceDB._currDB;\r\n//     }\r\n// }","import { DataBase } from \"./DataBase\";\r\nimport { dbTables } from \"../models/listsAndEnums/dbTables\";\r\nimport { tableDB } from \"../models/interfacesAndTypes/tableDB\";\r\nimport { idDB } from \"../models/interfacesAndTypes/idDB\";\r\n\r\nimport listLocations from './listLocations.json';\r\nimport listComplexes from './listComplexes.json';\r\nimport listApartments from './listApartment.json'; \r\nimport listUsers from './listUsers.json'; \r\nimport { tableFieldValue } from \"../models/interfacesAndTypes/tableFieldValue\";\r\n\r\nexport class FireBaseDB extends DataBase{\r\n\r\n    constructor(name: string, path: string){\r\n        super(name, path);\r\n    }\r\n\r\n    async init(): Promise<boolean>{\r\n        return Promise.resolve(true);\r\n    };\r\n\r\n    async get(table: dbTables): Promise<tableDB>\r\n    {\r\n        return Promise.resolve([{}]);\r\n    };\r\n\r\n    async getAll(): Promise<tableDB>\r\n    {\r\n        return Promise.resolve([{}]);\r\n    };\r\n\r\n    async writeAll(data: tableDB, table: dbTables): Promise<boolean>{\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    async getByQuery(query: string): Promise<tableDB>{\r\n        return fetch(listApartments)\r\n        .then(response => response.json())\r\n    };\r\n\r\n    async getNewRecords(table: dbTables, existedId: idDB[]): Promise<tableDB>{\r\n        \r\n        let list: any;\r\n\r\n        switch (table) {\r\n            case dbTables.locations:\r\n                list = listLocations;\r\n                break;\r\n            case dbTables.complexes:\r\n                list = listComplexes;\r\n                break;\r\n            case dbTables.apartments:\r\n                list = listApartments;\r\n                break;\r\n            default:\r\n                return Promise.resolve([]);\r\n        }      \r\n        \r\n        return fetch(list).then(response => response.json());\r\n    };  \r\n\r\n    async getByForeignKeys(table: dbTables, fieldName: string, foreignKeys: tableFieldValue[]): Promise<tableDB>{\r\n\r\n    let list: any;\r\n\r\n    switch (table) {\r\n        case dbTables.locations:\r\n            list = listLocations;\r\n            break;\r\n        case dbTables.complexes:\r\n            list = listComplexes;\r\n            break;\r\n        case dbTables.apartments:\r\n            list = listApartments;\r\n            break;\r\n        case dbTables.users:\r\n            list = listUsers;\r\n            break;\r\n        default:\r\n            return Promise.resolve([]);\r\n    }\r\n    \r\n        return fetch(list)\r\n        .then(response => response.json())\r\n        .then(mass => mass.filter((el: {[id: idDB]: tableFieldValue}) => {\r\n            return foreignKeys.includes(el[fieldName])\r\n        }));\r\n        // return Promise.resolve(fetch(listLocations).then(response => response.json()));\r\n    };\r\n\r\n}","import { RedirectPath, Router } from \"./router\";\nimport {CartPage, HistoryPage, ProductPage, HomePage, ComplexesPage, FavoritesPage, } from \"./pages\";\nimport { dataMap } from \"./models/listsAndEnums/dataMap\";\nimport { dbTables } from \"./models/listsAndEnums/dbTables\";\nimport { ComplexPage } from \"./pages/complex/ComplexPage\";\nimport { ApartmentList } from \"./models/apartment/ApartmentList\";\nimport { User } from \"./models/user/User\";\nimport { userDataValidating } from \"./service/validator/userDataValidating\";\nimport { FormValidator } from \"./service/validator/FormValidator\";\nimport {requiredText, validEmail, validPhone} from \"./service/validator/Validators\";\nimport { clearMessages, createElementByErr, setFormErrors } from \"./service/validator/serviceFunctions\";\nimport { userStorage } from \"./dataBase/serviceDB\";\nimport { idDB } from \"./models/interfacesAndTypes/idDB\";\nimport \"./styles/style.scss\";\nimport { ComplexList } from \"./models/complex/ComplexList\";\n\nlet user: User | undefined;\nconst logInForm = document.forms.namedItem(\"log-in\")!;\nconst buttonLogIn = document.querySelector('.log-in button')!;\nconst buttonSubmitLogIn = logInForm.querySelector('button[name=\"submit\"]')!;\nconst userLocal = await userStorage.getAll();\nconst userDataValidator = new FormValidator <userDataValidating>({\n  name: [],\n  email: [\n      validEmail,\n  ],\n  phone: [\n      requiredText,\n      validPhone,\n  ],\n  password: [\n      requiredText,\n  ],\n});\n\nawait dataMap.get(dbTables.locations)?.updateFromDB(dbTables.locations)\n  .then(() => dataMap.get(dbTables.complexes)?.updateFromDB(dbTables.complexes));\n\nif(userLocal.length && userLocal[0].id){\n  const userRow = userLocal[0];\n  user = new User(userRow.id as idDB, userRow.email as string, '', userRow.name as string);\n  user.authorized = userRow.authorized as boolean;\n  setVisualizationForUser(user, logInForm);\n\n  await (dataMap.get(dbTables.apartments) as ApartmentList).updateFavoriteFromLocalStorage(user);\n}\n\nlogInForm.addEventListener(\"submit\", (event) => handleLogIn(event, buttonSubmitLogIn));\n\nconst appRouter = new Router([\n  {\n    path: \"\",\n    page: HomePage,\n    // redirectTo: '/products'\n  },\n  {\n    path: \"cart\",\n    page: CartPage,\n  },\n  {\n    path: \"history\",\n    page: HistoryPage,\n    guards: [\n      () =>\n        new Promise<RedirectPath>((resolve) => {\n          setTimeout(() => resolve(new RedirectPath(\"/\")), 2_000);\n        }),\n    ],\n  },\n  {\n    path: \"complexes\",\n    page: ComplexesPage,\n    resolve: {\n      complexList: () =>\n        dataMap\n          .get(dbTables.locations)\n          ?.updateFromDB(dbTables.locations)\n          .then(() =>\n            dataMap.get(dbTables.complexes)?.updateFromDB(dbTables.complexes)\n          )\n          .then(() => {\n            const complexList = dataMap.get(dbTables.complexes) as ComplexList;\n            return Array.from(complexList.objectList.values());\n          })\n          .catch(() => false),\n      // complexesList: () => fetch(listPath).then(response => response.json()),\n    },\n  },\n\n  {\n    path: \"complexes/:complexId\",\n    page: ComplexPage,\n    resolve: {\n      apartList: (state) => {\n        const complexId = Number(state.params.complexId);\n        const apartList = dataMap.get(dbTables.apartments) as ApartmentList;\n        return apartList.updateByComplexId(state.params.complexId).then(()=>\n            Array.from(apartList.objectList.values()).filter(el => el.complex!.id === complexId))\n      },\n      user: ()=>(user),\n      // complexesList: () => fetch(listPath).then(response => response.json()),\n    },\n  },\n\n  {\n    path: \"favorites\",\n    page: FavoritesPage,\n    resolve: {\n      apartList: () => {\n        const apartList = dataMap.get(dbTables.apartments) as ApartmentList;\n        return apartList.updateFavoriteFromLocalStorage(user!).then(()=>\n            Array.from(apartList.objectList.values()).filter(el => apartList.favoriteList.has(el.id)))\n      },\n      user: ()=>(user),\n      // complexesList: () => fetch(listPath).then(response => response.json()),\n    },\n    guards: [\n      () => {\n        if(user!.authorized)\n          return true;\n        return new Promise<RedirectPath>((resolve) => {\n            setTimeout(() => resolve(new RedirectPath(\"/\")), 2_000);\n        })},\n    ],\n  },\n\n  {\n    path: \"products/:productId\",\n    page: ProductPage,\n  },\n]);\n\nappRouter.start();\n\nfunction setVisualizationForUser(user: User | undefined, logInForm: HTMLFormElement){\n\n  // if(!user) return;\n\n  // new FormData(logInForm).set(\"user-name\", 'phone');\n  // new FormData(logInForm).set(\"user-phone\", 'phone');\n  // new FormData(logInForm).set(\"user-email\", 'email');\n  // new FormData(logInForm).set(\"user-password\", '');\n\n  \n  // logInForm.querySelector('input[name=\"user-password\"]')!.textContent = '';\n\n  logInForm.querySelector('input[name=\"u-n\"]')!.setAttribute('value', user!.name);\n  logInForm.querySelector('input[name=\"user-phone\"]')!.setAttribute('value', user!.phone as string);\n  logInForm.querySelector('input[name=\"user-email\"]')!.setAttribute('value', user!.email);\n\n  if(user && user.authorized){\n    buttonLogIn.textContent = \"Профиль\";\n    buttonSubmitLogIn.textContent = \"Выйти\";\n    logInForm.querySelector('input[name=\"user-phone\"]')!.setAttribute('readOnly', 'true');\n    logInForm.querySelector('input[name=\"user-phone\"]')!.setAttribute('readOnly', 'true');\n    logInForm.querySelector('input[name=\"user-password\"]')!.setAttribute('type', 'hidden');\n    document.getElementById('id-pass-label')!.style.display = 'none'; \n  }\n  else{\n    buttonLogIn.textContent = \"Войти\";  \n    buttonSubmitLogIn.textContent = \"Войти\";\n    logInForm.querySelector('input[name=\"user-phone\"]')!.removeAttribute('readOnly');\n    logInForm.querySelector('input[name=\"user-phone\"]')!.removeAttribute('readOnly');\n    logInForm.querySelector('input[name=\"user-password\"]')!.setAttribute('value', '');\n    logInForm.querySelector('input[name=\"user-password\"]')!.setAttribute('type', 'password');\n    // document.getElementById('id-pass-label')!.style.display = 'inline'; \n  }\n}\n\nasync function handleLogIn(event: SubmitEvent, buttonSubmitLogIn: Element): Promise<void>{\n  \n  event.preventDefault();\n\n  if(buttonSubmitLogIn.textContent === \"Войти\"){\n\n    const userData: userDataValidating = {\n      name: String(new FormData(logInForm).get(\"user-password\")).trim(),\n      phone: String(new FormData(logInForm).get(\"user-phone\")).trim(),\n      email: String(new FormData(logInForm).get(\"user-email\")).trim(),\n      password: String(new FormData(logInForm).get(\"user-password\")).trim(),  \n    };\n\n    const errors = userDataValidator.validate(userData);\n    clearMessages(document);\n    setFormErrors(document, errors);\n\n    if(errors) return;\n\n    user = new User(userData.phone, userData.email, userData.password, userData.name);\n\n    await user.authorize().then(() => setVisualizationForUser(user, logInForm));\n\n    if(user.authorized){\n      document.getElementById('id-log-in')!.style.display='none';\n      setTimeout(()=>{location.reload()},100);\n    }\n    else\n      document.getElementById('submitError')!.appendChild(createElementByErr('Вход не выполнен'));\n  }\n  else{ \n    user!.authorized = false;\n    userStorage.writeAll([{\n      'id': user!.phone,\n      'email': user!.email,\n      'name': user!.name,\n      'password': '',\n      'authorized': user!.authorized\n    }]);\n\n    setVisualizationForUser(user, logInForm);\n    setTimeout(()=>{location.reload()},100);\n  }\n  await (dataMap.get(dbTables.apartments) as ApartmentList).updateFavoriteFromLocalStorage(user!);\n}\n","import { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\n\r\nexport abstract class ObjectDB{\r\n\r\n    static readonly tableName: dbTables;\r\n\r\n    constructor(protected _id: idDB, \r\n            protected _name: string = '', \r\n                protected _description: string = '', \r\n                    protected _imgMain: string = ''){\r\n    }\r\n\r\n    abstract fillFromDB(): Promise<boolean>;\r\n\r\n    fillFromData(record: tableRecord): void{\r\n        this._name = record.name as string;\r\n        this._description = record.description as string;\r\n        this._imgMain = record.imgMain as string;\r\n    };\r\n\r\n    get id(): idDB{\r\n        return this._id;\r\n    }\r\n\r\n    get name(): string{\r\n        return this._name;\r\n    }\r\n\r\n    get description(): string{\r\n        return this._description;\r\n    }\r\n\r\n    get imgMain(): string{\r\n        return this._imgMain;\r\n    }\r\n\r\n    //abstract get(id: idDB):Promise<boolean>;\r\n    // abstract set(_properties: tableRecord):Promise<boolean>;\r\n    // abstract update(_properties: tableRecord):Promise<boolean>;\r\n    // abstract delete(id: idDB):Promise<boolean>;\r\n}","export enum propertyTypes {\r\n    complex,\r\n    apartment,\r\n    house,\r\n}","import { ObjectDB } from \"./ObjectDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { Location } from \"../location/Location\";\r\nimport { propertyTypes } from \"../listsAndEnums/propertyTypes\";\r\nimport { propertyOptions } from \"../listsAndEnums/propertyOptions\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dataMap } from \"../listsAndEnums/dataMap\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\n\r\nexport abstract class Property extends ObjectDB{\r\n\r\n    protected _price: number;\r\n    protected _propertyOptions: propertyOptions[];\r\n    protected _propertyType: propertyTypes | undefined; \r\n    protected _location: Location | undefined;\r\n\r\n    constructor(id: idDB, name?: string, description: string = '', imgMain: string = '', price = 0, propertyType = undefined, location = undefined, propertyOptions = []){\r\n        super(id, name, description, imgMain); \r\n        this._price = price;\r\n        this._propertyType = propertyType;\r\n        this._location = location;\r\n        this._propertyOptions = propertyOptions;           \r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n\r\n        super.fillFromData(record);\r\n\r\n        this._propertyOptions = (record.propertyOptions as unknown[]).map(el => el as propertyOptions);\r\n        this._location = dataMap.get(dbTables.locations)?.getItem(record.locationId as number) as Location;\r\n    };\r\n\r\n    get location(): Location | undefined{\r\n        return this._location;\r\n    }\r\n\r\n    get propertyOptions(): propertyOptions[]{\r\n        return this._propertyOptions;\r\n    }\r\n\r\n    get propertyType(): propertyTypes | undefined{\r\n        return this._propertyType;\r\n    }\r\n\r\n    get price(): number{\r\n        return this._price;\r\n    }\r\n}","import { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { Location } from \"../location/Location\";\r\nimport { Property } from \"./Property\";\r\nimport { roomsNumberTypes } from \"../listsAndEnums/roomsNumberTypes\";\r\n\r\nexport abstract class ResidentialProperty extends Property{\r\n    \r\n    protected _location: Location | undefined;\r\n    \r\n    protected _roomsNumber: roomsNumberTypes | undefined;  \r\n    \r\n    protected _commissioningDate: string;\r\n\r\n    protected _square: number;\r\n\r\n    constructor(id: idDB){\r\n        super(id);      \r\n        this._commissioningDate = '';\r\n        this._square = 0;\r\n    }\r\n\r\n    get roomsNumber(): roomsNumberTypes | undefined{\r\n        return this._roomsNumber;\r\n    }\r\n\r\n    get commissioningDate(): string{\r\n        return this._commissioningDate;\r\n    }\r\n\r\n    get square(): number{\r\n        return this._square;\r\n    }\r\n}","import { ResidentialProperty } from \"../abstracts/ResidentialProperty\";\r\nimport { Complex } from \"../complex/Complex\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dataMap } from \"../listsAndEnums/dataMap\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { propertyTypes } from \"../listsAndEnums/propertyTypes\";\r\nimport { roomsNumberTypes } from \"../listsAndEnums/roomsNumberTypes\";\r\n\r\nexport class Apartment extends ResidentialProperty{\r\n\r\n    static tableName = dbTables.complexes;\r\n    #complex: Complex | undefined;\r\n    #floor: string;\r\n\r\n    constructor(id: idDB){\r\n        super(id);\r\n        \r\n        this._propertyType = propertyTypes.apartment;\r\n        this.#floor = '';\r\n    }\r\n\r\n    async fillFromDB(): Promise<boolean>{\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n\r\n        super.fillFromData(record);\r\n\r\n        this.#complex = dataMap.get(dbTables.complexes)?.getItem(record.complexId as number) as Complex;\r\n        this._roomsNumber = record.roomsNumber as roomsNumberTypes;\r\n        this._commissioningDate = record.commissioningDate as string;\r\n        this._square = record.square as number;\r\n        this.#floor = record.floor as string;\r\n        this._price = record.price as number;\r\n    }\r\n\r\n    get complex(): Complex | undefined{\r\n        return this.#complex;\r\n    }\r\n\r\n    get floor(): string{\r\n        return this.#floor;\r\n    }\r\n\r\n}","\r\nimport { currDB } from \"../../dataBase/serviceDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { ObjectDB } from \"./ObjectDB\";\r\n\r\nexport abstract class ObjectList<T extends ObjectDB> {\r\n   \r\n    protected _objectList: Map<idDB, T>; \r\n\r\n    constructor(){\r\n        this._objectList = new Map<idDB, T>();\r\n    }\r\n\r\n    abstract createNewItems(newItemsDB: tableDB): void;\r\n    abstract createNewItem(id: idDB, newItemsDB: tableRecord): T;\r\n    // abstract getItem(id: idDB, tableRecord?: tableRecord): T | undefined;\r\n\r\n    async checkNewItems(tableName: dbTables): Promise<tableDB | undefined>{\r\n\r\n        return await currDB.getNewRecords(tableName, Object.keys(this.objectList));\r\n\r\n        //return await ServiceDB.currDB.getByQuery(`SELECT * FROM ${tableName} WHERE NOT id IN ${Object.keys(this.objectList).join(', ')}`);\r\n        \r\n    }\r\n\r\n    async updateFromDB(tableName: dbTables): Promise<boolean>{\r\n\r\n        const newItemsDB = await this.checkNewItems(tableName);\r\n        if (newItemsDB)\r\n            this.createNewItems(newItemsDB);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    findItem(id: idDB): T | undefined{\r\n        return this._objectList.get(id);\r\n    }\r\n    getItem(id: idDB, tableRecord?: tableRecord): T{\r\n\r\n        let obj = this.findItem(id);\r\n        \r\n        if(!obj)\r\n            obj = this.createNewItem(id, tableRecord!);\r\n\r\n        return obj;    \r\n    }\r\n\r\n    get objectList(): Map<idDB, T>{\r\n        return this._objectList;\r\n    }\r\n\r\n\r\n\r\n}","import { Property } from \"../abstracts/Property\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dataMap } from \"../listsAndEnums/dataMap\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { propertyOptions } from \"../listsAndEnums/propertyOptions\";\r\nimport { propertyTypes } from \"../listsAndEnums/propertyTypes\";\r\nimport { Location } from \"../location/Location\";\r\n\r\nexport class Complex extends Property{\r\n\r\n    static tableName = dbTables.complexes;\r\n    #minPrice: number;\r\n    #maxPrice: number;\r\n\r\n    // constructor(location: Location, name: string, description: string, propertyOptions: propertyOptions[], id: idDB){\r\n    //     super(location, name, description, propertyOptions, id);        \r\n    // }\r\n\r\n    constructor(id: idDB){\r\n        super(id);\r\n        this.#minPrice = 0;\r\n        this.#maxPrice = 0;\r\n        this._propertyType = propertyTypes.complex;\r\n    }\r\n\r\n    async fillFromDB(): Promise<boolean>{\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n\r\n        super.fillFromData(record);\r\n           \r\n        this.#minPrice = record.minPrice as number;\r\n        this.#maxPrice = record.maxPrice as number;  \r\n    }\r\n\r\n    get minPrice(): number{\r\n        return this.#minPrice;\r\n    }\r\n    get maxPrice(): number{\r\n        return this.#maxPrice;\r\n    }\r\n}","import { Coordinates } from \"../interfacesAndTypes/Coordinates\";\r\nimport { ObjectDB } from \"../abstracts/ObjectDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\n\r\nexport class Location extends ObjectDB {\r\n  private _coordinates: Coordinates;\r\n  static tableName = dbTables.locations;\r\n\r\n  constructor(id: idDB, name?: string, description: string = '', imgMain: string = '',) {\r\n    super(id, name, description, imgMain);\r\n    this._coordinates = { latitude: \"\", longitude: \"\" };\r\n  }\r\n\r\n  async fillFromDB(): Promise<boolean> {\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  fillFromData(record: tableRecord): void {\r\n\r\n    super.fillFromData(record);\r\n\r\n    this._coordinates.latitude = record.latitude as string;\r\n    this._coordinates.longitude = record.longitude as string;\r\n  }\r\n\r\n  get coordinates(): Coordinates {\r\n    return this._coordinates;\r\n  }\r\n\r\n  // constructor(coordinates: Coordinates, name: string, description: string, id: idDB, tableName: dbTables){\r\n  //     super(tableName, id);\r\n  //     this._coordinates = coordinates;\r\n  //     this._name = name;\r\n  //     this._description = description;\r\n  // }\r\n\r\n  // async updateFromDB(): Promise<boolean>{\r\n  //     await this._dBObject.get(this._id);\r\n\r\n  //     this._coordinates.latitude = this._dBObject.properties['latitude'] as string;\r\n  //     this._coordinates.longitude = this._dBObject.properties['longitude'] as string;\r\n  //     this._name = this._dBObject.properties['name'] as string;\r\n  //     this._description = this._dBObject.properties['description'] as string;\r\n  //     this._id = this._dBObject.properties['id'] as idDB;\r\n\r\n  //     return Promise.resolve(true);\r\n  // }\r\n}\r\n","import { ObjectDB } from \"../abstracts/ObjectDB\";\r\nimport { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { ApartmentList } from \"../apartment/ApartmentList\";\r\nimport { ComplexList } from \"../complex/ComplexList\"\r\nimport { LocationList } from \"../location/LocationList\";\r\nimport { dbTables } from \"./dbTables\";\r\n\r\nconst complexes = new ComplexList();\r\nconst locations = new LocationList();\r\nconst apartments = new ApartmentList();\r\n\r\nexport const dataMap = new Map<dbTables, ObjectList<ObjectDB>>();\r\n\r\ndataMap.set(dbTables.complexes, complexes);\r\ndataMap.set(dbTables.locations, locations);\r\ndataMap.set(dbTables.apartments, apartments);","import { Complex } from \"./Complex\";\r\nimport { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\n\r\nexport class ComplexList extends ObjectList<Complex>{\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    createNewItems(newItemsDB: tableDB): void{\r\n\r\n        newItemsDB.forEach(element => {\r\n            this.getItem(element.id as idDB, element as tableRecord);         \r\n        });    \r\n    }\r\n\r\n    // getItem(id: idDB, tableRecord?: tableRecord): Complex{\r\n\r\n    //     let obj = this.findItem(id);\r\n        \r\n    //     if(!obj)\r\n    //         obj = this.createNewItem(id, tableRecord);\r\n\r\n    //     return obj;    \r\n    // }\r\n\r\n    createNewItem(id: idDB, newItemDB?: tableRecord): Complex{\r\n        const complex = new Complex(id);\r\n        if(newItemDB)\r\n            complex.fillFromData(newItemDB);\r\n        else\r\n            complex.fillFromDB();\r\n\r\n        this.objectList.set(id, complex);   \r\n\r\n        return complex;\r\n    }\r\n\r\n}","import { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { Location } from \"./Location\";\r\n\r\n\r\nexport class LocationList extends ObjectList<Location>{\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    // async updateFromDB(): Promise<boolean>{\r\n\r\n    //     const newItemsDB = await this.checkNewItems(Location.tableName);\r\n    //     if (newItemsDB)\r\n    //         this.createNewItems(newItemsDB);\r\n\r\n    //     return Promise.resolve(true);\r\n    // }\r\n\r\n    createNewItems(newItemsDB: tableDB): void{\r\n\r\n        newItemsDB.forEach(element => {\r\n            this.getItem(element.id as idDB, element as tableRecord);         \r\n        });    \r\n\r\n    }\r\n\r\n    // getItem(id: idDB, tableRecord?: tableRecord): Location | undefined{\r\n\r\n    //     if(!id)\r\n    //         return undefined;\r\n\r\n    //     let obj = this.findItem(id);\r\n        \r\n    //     if(!obj)\r\n    //         obj = this.createNewItem(id, tableRecord);\r\n\r\n    //     return obj;    \r\n\r\n    // }\r\n\r\n    createNewItem(id: idDB, newItemDB?: tableRecord): Location{\r\n        const location = new Location(id);\r\n        if(newItemDB)\r\n            location.fillFromData(newItemDB);\r\n        else\r\n            location.fillFromDB();\r\n\r\n        this.objectList.set(id, location);\r\n\r\n        return location;\r\n    }\r\n\r\n}","import { Apartment } from \"./Apartment\";\r\nimport { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { currDB, favPropStorage } from \"../../dataBase/serviceDB\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { User } from \"../user/User\";\r\n\r\nexport class ApartmentList extends ObjectList<Apartment>{\r\n\r\n    private _favoriteList: Set<idDB>; \r\n\r\n    constructor(){\r\n        super();\r\n        this._favoriteList = new Set<idDB>();\r\n    }\r\n\r\n    createNewItems(newItemsDB: tableDB): void{\r\n\r\n        newItemsDB.forEach(element => {\r\n            this.getItem(element.id as idDB, element as tableRecord);         \r\n        });    \r\n    }\r\n\r\n    // getItem(id: idDB, tableRecord?: tableRecord): Apartment{\r\n\r\n    //     let obj = this.findItem(id);\r\n        \r\n    //     if(!obj)\r\n    //         obj = this.createNewItem(id, tableRecord);\r\n\r\n    //     return obj;    \r\n    // }\r\n\r\n    createNewItem(id: idDB, newItemDB?: tableRecord): Apartment{\r\n        const apartment = new Apartment(id);\r\n        if(newItemDB)\r\n            apartment.fillFromData(newItemDB);\r\n        else\r\n            apartment.fillFromDB();\r\n\r\n        this.objectList.set(id, apartment);   \r\n\r\n        return apartment;\r\n    }\r\n\r\n    async updateByComplexId(id: idDB): Promise<boolean>{\r\n\r\n        return currDB.getByForeignKeys(dbTables.apartments, \"complexId\", [Number(id)])\r\n            .then((dataRows) => this.createNewItems(dataRows))\r\n            .then(() => true)\r\n            .catch(() => false);\r\n    }\r\n\r\n    async updateFavoriteFromDB(user: User): Promise<boolean>{\r\n        if(user.authorized)\r\n            return this.updateFavoriteFromServerDB(user);\r\n        else\r\n            return this.updateFavoriteFromLocalStorage(user);\r\n    }\r\n\r\n    async updateFavoriteFromServerDB(user: User): Promise<boolean>{\r\n\r\n        return currDB.getByForeignKeys(dbTables.userFavorites, \"userId\", [String(user.id)])\r\n            .then((dataRows) => {\r\n                const idArr = dataRows.map(el => el.apartmentId as number);\r\n                return currDB.getByForeignKeys(dbTables.apartments, \"id\", idArr);\r\n            })\r\n            .then((dataRows) => {\r\n                this.createNewItems(dataRows);\r\n                return dataRows;\r\n            })\r\n            .then((dataRows) => {          \r\n                dataRows.forEach(el => {\r\n                    this._favoriteList.add(el.id as idDB);                 \r\n                });    \r\n            })\r\n            .then(() => true)\r\n            .catch(() => false);\r\n    }\r\n\r\n    async updateFavoriteFromLocalStorage(user: User): Promise<boolean>{\r\n\r\n        this._favoriteList.clear();\r\n        \r\n        if(!user.authorized) return Promise.resolve(true);\r\n\r\n        return favPropStorage.getArray()\r\n            .then((dataRows) => {\r\n                const idArr = dataRows.map(id => id as number);\r\n                return currDB.getByForeignKeys(dbTables.apartments, \"id\", idArr);\r\n            })\r\n            .then((dataRows) => {\r\n                this.createNewItems(dataRows);\r\n                return dataRows;\r\n            })\r\n            .then((dataRows) => {          \r\n                dataRows.forEach(el => {\r\n                    this._favoriteList.add(el.id as idDB);                 \r\n                });    \r\n            })\r\n            .then(() => true)\r\n            .catch(() => false);\r\n    }\r\n\r\n    async setRemoveApartmentAsFavorite(user: User, idApartment: idDB, favorite: boolean){\r\n        if(favorite)\r\n            this._favoriteList.add(idApartment);\r\n        else\r\n            this._favoriteList.delete(idApartment);\r\n\r\n        // if(user.authorized)\r\n        //     //пишем на сервер\r\n        // else\r\n            favPropStorage.writeArray(Array.from(this._favoriteList));\r\n    }\r\n\r\n    get favoriteList(): Set<idDB>{\r\n        return this._favoriteList;\r\n    }\r\n\r\n}","export enum dbTables {\r\n    locations,\r\n    complexes, \r\n    properties,\r\n    apartments,\r\n    userFavorites,\r\n    propertyType,\r\n    propertyOptions, \r\n    leads,\r\n    users,\r\n    quizzes,\r\n    quizAnswers,\r\n}","export enum propertyOptions {\r\n    outdoorPool = <any> 'outdoorPool',\r\n    indoorPool = <any> 'indoorPool', \r\n    videoSurveillance = <any> 'videoSurveillance', \r\n    bar = <any> 'bar', \r\n    restaurant = <any> 'restaurant', \r\n    fitnessRoom = <any> 'fitnessRoom', \r\n}\r\n\r\nexport const propertyOptionsDescription = new Map<propertyOptions, string>([\r\n    [propertyOptions.outdoorPool, 'открытый бассейн'],\r\n    [propertyOptions.indoorPool, 'закрытый бассейн'],\r\n    [propertyOptions.videoSurveillance, 'видеонаблюдение'],\r\n    [propertyOptions.bar, 'бар'],\r\n    [propertyOptions.restaurant, 'ресторан'],\r\n    [propertyOptions.fitnessRoom, 'фитнес зал'],\r\n  ]);","export enum roomsNumberTypes {\r\n    studio = <any> 'studio',\r\n    onePlusOne = <any> 'onePlusOne',\r\n    twoPlusOne = <any> 'twoPlusOne',\r\n    threePlusOne = <any> 'threePlusOne',\r\n    fourPlus = <any> 'fourPlus',\r\n}\r\n\r\nexport const roomsNumberDescription = new Map<roomsNumberTypes, string>([\r\n    [roomsNumberTypes.studio, 'Студия'],\r\n    [roomsNumberTypes.onePlusOne, '1+1'],\r\n    [roomsNumberTypes.twoPlusOne, '2+1'],\r\n    [roomsNumberTypes.threePlusOne, '3+1'],\r\n    [roomsNumberTypes.fourPlus, '4+']\r\n  ]);","import { currDB, userStorage } from \"../../dataBase/serviceDB\";\r\nimport { ObjectDB } from \"../abstracts/ObjectDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\n\r\nexport class User extends ObjectDB {\r\n  private _phone: idDB;\r\n  private _email: string;\r\n  private _password: string;\r\n  private _authorized: boolean;\r\n  static tableName = dbTables.users;\r\n\r\n  constructor(phone: idDB, email: string = '', password: string = '', name: string = '', description: string = '', imgMain: string = '') {\r\n    \r\n    super(phone, name, description, imgMain);\r\n\r\n    this._phone = phone;\r\n    this._email = email;\r\n    this._password = password;\r\n    this._authorized = false;\r\n  }\r\n\r\n  async fillFromDB(): Promise<boolean> {\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  async authorize(): Promise<boolean> {\r\n    if(!this._email && !this._phone)\r\n        return Promise.resolve(false);\r\n\r\n    return currDB.getByForeignKeys(dbTables.users, \"id\", [String(this._phone)])\r\n        .then(dataRows => {\r\n\r\n            if(!dataRows.length)\r\n                currDB.writeAll([{\r\n                    'id': this._phone,\r\n                    'email': this._email,\r\n                    'name': this._name,\r\n                    'password': this._password,\r\n                }], dbTables.users);\r\n\r\n            const dataRow: tableRecord = dataRows[0];    \r\n            this._authorized = dataRow.password === this._password; // заменить на хэширование и проверку на сервере\r\n            if(this._authorized){  \r\n                if(!this._email)\r\n                    this._email = dataRow.email as string;\r\n                if(!this._phone)\r\n                    this._phone = dataRow.phone as idDB;\r\n                if(!this._name)\r\n                    this._name = dataRow.name as string;\r\n            }\r\n\r\n            userStorage.writeAll([{\r\n                'id': this._phone,\r\n                'email': this._email,\r\n                'name': this._name,\r\n                'password': this._password,\r\n                'authorized': this._authorized,\r\n            }]);\r\n\r\n            return this._authorized;\r\n\r\n        })\r\n        .then(answ => answ)\r\n        .catch(answ => false)\r\n    }\r\n\r\n    get phone(): idDB{\r\n        return this._phone;\r\n    }\r\n\r\n    get email(): string{\r\n        return this._email;\r\n    }\r\n\r\n    get authorized(): boolean{\r\n        return this._authorized;\r\n    }\r\n\r\n    set authorized(value: boolean){\r\n        this._authorized = value;\r\n    }\r\n\r\n}\r\n","import { Apartment } from \"../../models/apartment/Apartment\";\nimport { ApartmentList } from \"../../models/apartment/ApartmentList\";\nimport { ComplexList } from \"../../models/complex/ComplexList\";\nimport { dataMap } from \"../../models/listsAndEnums/dataMap\";\nimport { dbTables } from \"../../models/listsAndEnums/dbTables\";\nimport { propertyOptionsDescription } from \"../../models/listsAndEnums/propertyOptions\";\nimport { roomsNumberDescription } from \"../../models/listsAndEnums/roomsNumberTypes\";\nimport { User } from \"../../models/user/User\";\nimport {AbstractPage} from \"../../router\";\nimport template from './ComplexPage.html';\nimport templateItem from './apartmentItem.html';\n\nconst templateEl = document.createElement('template');\nconst templateItemEl = document.createElement('template');\ntemplateEl.innerHTML = template;\ntemplateItemEl.innerHTML = templateItem;\n\nexport class ComplexPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    const nameOfComplex = (dataMap.get(dbTables.complexes) as ComplexList)?.objectList.get(Number(this.routeState.params.complexId))?.name;\n\n    if(!this.routeState.resolvedData || !this.routeState.resolvedData.apartList){\n      return templateEl.content.cloneNode(true) as DocumentFragment;                                                           \n    }\n\n    // const apartments = (dataMap.get(dbTables.apartments) as ApartmentList)?.objectList.values();\n    // if(!apartments)\n    //   return templateEl.content.cloneNode(true) as DocumentFragment;\n\n    const complexSections: DocumentFragment[] = (this.routeState.resolvedData.apartList as Apartment[]).map((el) => {\n      const cloneTemplateItemEl = templateItemEl.content.cloneNode(true) as DocumentFragment;\n\n      const buttonLike = cloneTemplateItemEl.querySelector('.apartment-box__like')! as HTMLElement;\n      buttonLike.dataset.apartId = el.id as string;\n\n      buttonLike.textContent = (dataMap.get(dbTables.apartments) as ApartmentList).favoriteList.has(el.id) ? \"Снять отметку\" : \"Отметить\";\n\n      if(!(this.routeState!.resolvedData!.user as User).authorized)\n        buttonLike.setAttribute('disabled', '');\n\n      buttonLike.addEventListener('click', (event) => {\n        const apartId = Number((event.target as HTMLElement).dataset.apartId);\n        const isFavorite = (dataMap.get(dbTables.apartments) as ApartmentList).favoriteList.has(el.id);\n        buttonLike.textContent = isFavorite ? \"Отметить\" : \"Снять отметку\";\n        (dataMap.get(dbTables.apartments) as ApartmentList).setRemoveApartmentAsFavorite(this.routeState!.resolvedData!.user as User, apartId, !isFavorite)\n      });\n\n      // const imgEl = cloneTemplateItemEl.querySelector('.apartment-box__img')!;\n      // const nameEl = cloneTemplateItemEl.querySelector('.apartment-box__name')!;\n      const roomsNumberEl = cloneTemplateItemEl.querySelector('.apartment-box__roomsNumber')!;\n      const propertySquare = cloneTemplateItemEl.querySelector('.apartment-box__propertySquare')!;\n      const priceEl = cloneTemplateItemEl.querySelector('.apartment-box__price')!;\n      const floorEl = cloneTemplateItemEl.querySelector('.apartment-box__floor')!;\n      const commissioningDateEl = cloneTemplateItemEl.querySelector('.apartment-box__commissioningDate')!;\n\n      \n      const descriptionEl = cloneTemplateItemEl.querySelector('.apartment-box__description')!;\n      const propertyOptionsEl = cloneTemplateItemEl.querySelector('.apartment-box__propertyOptions')!;\n      \n\n      // imgEl.setAttribute('src', el.imgMain);\n      // nameEl.textContent = el.name;\n      if (el.roomsNumber)\n        roomsNumberEl.textContent = roomsNumberDescription.get(el.roomsNumber) ?? null;\n      propertySquare.textContent = `${el.square} м2` ?? null;\n      priceEl.textContent = `цена: ${el.price}$`;\n      commissioningDateEl.textContent = `дата сдачи: ${el.commissioningDate?.toString()}` ?? null;\n      floorEl.textContent = `этаж: ${el.floor}`;\n      if(el.propertyOptions.length){\n        const options = el.propertyOptions.map(opt => propertyOptionsDescription.get(opt));\n        propertyOptionsEl.innerHTML = `<span>${options.join('</span><span>')}</span>`;\n    }\n\n      descriptionEl.textContent = el.description;\n      \n      return cloneTemplateItemEl; \n    });\n\n    // templateEl.content.querySelector('.wrapper-complexes')!.innerHTML = complexSections.join(\"\\n\");\n    const cloneTemplateEl = templateEl.content.cloneNode(true) as DocumentFragment;\n    const templEl = cloneTemplateEl.querySelector('.wrapper-complex')!;\n    const templHeader = document.createElement(\"h1\");\n    templHeader.textContent = nameOfComplex!;\n    templEl.appendChild(templHeader);\n    templEl.append(...complexSections);\n    return cloneTemplateEl as DocumentFragment;\n  }\n}","import {AbstractPage} from \"../router\";\nimport template from './products.html';\n\nconst templEl = document.createElement('template');\ntemplEl.innerHTML = template;\n\ninterface ProductInfo {\n  id: number;\n  price: number;\n  title: string;\n}\n\nexport class ProductsPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    return templEl.content.cloneNode(true) as DocumentFragment;\n  }\n}\n","import { ComplexList } from \"../../models/complex/ComplexList\";\nimport { dataMap } from \"../../models/listsAndEnums/dataMap\";\nimport { dbTables } from \"../../models/listsAndEnums/dbTables\";\nimport {AbstractPage} from \"../../router\";\nimport template from './complexesPage.html';\nimport templateItem from './complexesItemPage.html';\nimport { Complex } from \"../../models/complex/Complex\";\n\nconst templateEl = document.createElement('template');\nconst templateItemEl = document.createElement('template');\ntemplateEl.innerHTML = template;\ntemplateItemEl.innerHTML = templateItem;\n\n\ninterface ProductInfo {\n  id: number;\n  price: number;\n  title: string;\n}\n\nexport class ComplexesPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    if(!this.routeState.resolvedData || !this.routeState.resolvedData.complexList){\n      return templateEl.content.cloneNode(true) as DocumentFragment; \n    }\n    \n    // const complexes = (dataMap.get(dbTables.complexes) as ComplexList)?.objectList.values();\n    // if(!complexes)\n    //   return templateEl.content.cloneNode(true) as DocumentFragment;\n\n    const complexSections: DocumentFragment[] = (this.routeState.resolvedData.complexList as Complex[]).map((el) => {\n\n      const clone = templateItemEl.content.cloneNode(true) as DocumentFragment;\n      const imgEl = clone.querySelector('.complex-box__img')!;\n      const complexEl = clone.querySelector('.complex')!;\n      const nameEl = clone.querySelector('.complex-box__name')!;\n      const locationEl = clone.querySelector('.complex-box__location')!;\n      const pricesEl = clone.querySelector('.complex-box__prices')!;\n      complexEl.setAttribute('href', `complexes/${el.id}`);\n      nameEl.textContent = el.name;\n      locationEl.textContent = el.location?.name ?? null;\n      pricesEl.textContent = `цены: ${el.minPrice}$ - ${el.maxPrice}$`;\n      imgEl.setAttribute('src', el.imgMain);\n      // return templateItemEl.innerHTML;\n       return clone; \n    });\n\n    // templateEl.content.querySelector('.wrapper-complexes')!.innerHTML = complexSections.join(\"\\n\");\n    const clone = templateEl.content.cloneNode(true) as DocumentFragment;\n    clone.querySelector('.wrapper-complexes')!.append(...complexSections);\n    return clone as DocumentFragment;\n  }\n}\n","import {AbstractPage} from \"../router\";\n\nexport class ProductPage extends AbstractPage {\n\n  render(): HTMLElement | DocumentFragment {\n    const content = document.createElement('div');\n\n    content.textContent = `Product: ${this.routeState.params.productId}`;\n\n    return content;\n  }\n\n}\n","import { Apartment } from \"../../models/apartment/Apartment\";\nimport { ComplexList } from \"../../models/complex/ComplexList\";\nimport { dataMap } from \"../../models/listsAndEnums/dataMap\";\nimport { dbTables } from \"../../models/listsAndEnums/dbTables\";\nimport { propertyOptionsDescription } from \"../../models/listsAndEnums/propertyOptions\";\nimport { roomsNumberDescription } from \"../../models/listsAndEnums/roomsNumberTypes\";\nimport {AbstractPage} from \"../../router\";\nimport template from './favoritesPage.html';\nimport templateItem from './apartmentItem.html';\nimport { ApartmentList } from \"../../models/apartment/ApartmentList\";\nimport { User } from \"../../models/user/User\";\n\nconst templateEl = document.createElement('template');\nconst templateItemEl = document.createElement('template');\ntemplateEl.innerHTML = template;\ntemplateItemEl.innerHTML = templateItem;\n\nexport class FavoritesPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    const nameOfComplex = (dataMap.get(dbTables.complexes) as ComplexList)?.objectList.get(Number(this.routeState.params.complexId))?.name;\n\n    if(!this.routeState.resolvedData || !this.routeState.resolvedData.apartList){\n      return templateEl.content.cloneNode(true) as DocumentFragment;                                                           \n    }\n\n    // const apartments = (dataMap.get(dbTables.apartments) as ApartmentList)?.objectList.values();\n    // if(!apartments)\n    //   return templateEl.content.cloneNode(true) as DocumentFragment;\n\n    const complexSections: DocumentFragment[] = (this.routeState.resolvedData.apartList as Apartment[]).map((el) => {\n      const cloneTemplateItemEl = templateItemEl.content.cloneNode(true) as DocumentFragment;\n\n      const buttonLike = cloneTemplateItemEl.querySelector('.apartment-box__like')! as HTMLElement;\n      buttonLike.dataset.apartId = el.id as string;\n\n      buttonLike.textContent = (dataMap.get(dbTables.apartments) as ApartmentList).favoriteList.has(el.id) ? \"Снять отметку\" : \"Отметить\";\n\n      buttonLike.addEventListener('click', (event) => {\n        const apartId = Number((event.target as HTMLElement).dataset.apartId);\n        const isFavorite = (dataMap.get(dbTables.apartments) as ApartmentList).favoriteList.has(el.id);\n        buttonLike.textContent = isFavorite ? \"Отметить\" : \"Снять отметку\";\n        (dataMap.get(dbTables.apartments) as ApartmentList).setRemoveApartmentAsFavorite(this.routeState!.resolvedData!.user as User, apartId, !isFavorite)\n      });\n\n      const roomsNumberEl = cloneTemplateItemEl.querySelector('.apartment-box__roomsNumber')!;\n      const propertySquare = cloneTemplateItemEl.querySelector('.apartment-box__propertySquare')!;\n      const priceEl = cloneTemplateItemEl.querySelector('.apartment-box__price')!;\n      const floorEl = cloneTemplateItemEl.querySelector('.apartment-box__floor')!;\n      const commissioningDateEl = cloneTemplateItemEl.querySelector('.apartment-box__commissioningDate')!;\n\n      \n      const descriptionEl = cloneTemplateItemEl.querySelector('.apartment-box__description')!;\n      const propertyOptionsEl = cloneTemplateItemEl.querySelector('.apartment-box__propertyOptions')!;\n      \n\n      // imgEl.setAttribute('src', el.imgMain);\n      // nameEl.textContent = el.name;\n      if (el.roomsNumber)\n        roomsNumberEl.textContent = roomsNumberDescription.get(el.roomsNumber) ?? null;\n      propertySquare.textContent = `${el.square} м2` ?? null;\n      priceEl.textContent = `цена: ${el.price}$`;\n      commissioningDateEl.textContent = `дата сдачи: ${el.commissioningDate?.toString()}` ?? null;\n      floorEl.textContent = `этаж: ${el.floor}`;\n      if(el.propertyOptions.length){\n        const options = el.propertyOptions.map(opt => propertyOptionsDescription.get(opt));\n        propertyOptionsEl.innerHTML = `<span>${options.join('</span><span>')}</span>`;\n    }\n\n      descriptionEl.textContent = el.description;\n      \n      \n      \n      return cloneTemplateItemEl; \n    });\n\n    // templateEl.content.querySelector('.wrapper-complexes')!.innerHTML = complexSections.join(\"\\n\");\n    const cloneTemplateEl = templateEl.content.cloneNode(true) as DocumentFragment;\n    const templEl = cloneTemplateEl.querySelector('.wrapper-complex')!;\n    const templHeader = document.createElement(\"h1\");\n    templHeader.textContent = 'Отмеченные объекты недвижимости'!;\n    templEl.appendChild(templHeader);\n    templEl.append(...complexSections);\n    return cloneTemplateEl as DocumentFragment;\n  }\n}","import {AbstractPage} from \"../router\";\n\nexport class HistoryPage extends AbstractPage {\n\n  render(): HTMLElement | DocumentFragment {\n    const content = document.createElement('div');\n\n    content.textContent = 'History';\n\n    return content;\n  }\n\n}\n","import {AbstractPage} from \"../router\";\n\nexport class CartPage extends AbstractPage {\n\n  render(): HTMLElement | DocumentFragment {\n    const content = document.createElement('div');\n\n    content.textContent = 'Cart';\n\n    return content;\n  }\n\n}\n","import {AbstractPage} from \"../../router\";\nimport template from './homePage.html';\n\nconst templEl = document.createElement('template');\ntemplEl.innerHTML = template;\n\ninterface ProductInfo {\n  id: number;\n  price: number;\n  title: string;\n}\n\nexport class HomePage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n    return templEl.content.cloneNode(true) as DocumentFragment;\n  }\n}\n","export const ROUTER_BUS = new class RouterBus extends EventTarget {\n\n}();\n","import {ROUTER_BUS} from \"../constants\";\n\ncustomElements.define('router-link', class RouterLink extends HTMLAnchorElement {\n\n  connectedCallback(): void {\n    this.addEventListener('click', this.#onClick);\n  }\n\n  disconnectedCallback(): void {\n    this.removeEventListener('click', this.#onClick);\n  }\n\n  #onClick(event: MouseEvent) {\n    event.preventDefault();\n    ROUTER_BUS.dispatchEvent(new CustomEvent('navigate', {\n      detail: { path: new URL(this.href).pathname },\n    }));\n  }\n\n}, { extends: 'a' });\n","import {ROUTER_BUS} from \"../constants\";\n\nconst ROUTER_OUTLET_TEMPLATE = document.createElement('template');\nROUTER_OUTLET_TEMPLATE.innerHTML = `\n<style>\n.router-outlet {\n    position: relative;\n}\n</style>\n<div class=\"router-outlet\">\n    <slot name=\"page\"></slot>\n    <slot name=\"loader\"></slot>\n</div>\n`.trim();\n\n\ncustomElements.define('router-outlet', class RouterOutlet extends HTMLElement {\n  readonly #shadowRoot = this.attachShadow({ mode: \"open\" });\n  readonly #loader = document.createElement('div');\n  readonly #page = document.createElement('div');\n  #timerId: number | undefined;\n\n  readonly #onNavigateStart = (): void => {\n    clearTimeout(this.#timerId);\n    this.#timerId = setTimeout(() => {\n      this.appendChild(this.#loader);\n    }, 150) as unknown as number;\n  };\n\n  readonly #onNavigateCancel = (): void => {\n    this.#cancelLoader();\n  };\n\n  readonly #onNavigateEnd = (event: Event): void => {\n    const { detail: { content } } = event as CustomEvent<{ content: HTMLElement | DocumentFragment }>;\n\n    this.#page.replaceChildren(content);\n    this.appendChild(this.#page);\n    this.#cancelLoader();\n  };\n\n  constructor() {\n    super();\n    this.#shadowRoot.appendChild(ROUTER_OUTLET_TEMPLATE.content.cloneNode(true));\n    this.#loader.setAttribute('slot', 'loader');\n    this.#page.setAttribute('slot', 'page');\n    this.#loader.append(...this.childNodes);\n  }\n\n  connectedCallback(): void {\n    ROUTER_BUS.addEventListener('navigatestart', this.#onNavigateStart);\n    ROUTER_BUS.addEventListener('navigateend', this.#onNavigateEnd);\n    ROUTER_BUS.addEventListener('navigatecancel', this.#onNavigateCancel);\n  }\n\n  disconnectedCallback(): void {\n    ROUTER_BUS.removeEventListener('navigatestart', this.#onNavigateStart);\n    ROUTER_BUS.removeEventListener('navigateend', this.#onNavigateEnd);\n    ROUTER_BUS.removeEventListener('navigatecancel', this.#onNavigateCancel);\n  }\n\n  #cancelLoader(): void {\n    this.#loader.remove();\n    clearTimeout(this.#timerId);\n  }\n\n});\n","export class RedirectPath extends String {\n\n}\n","import {ActivatedRouteState} from \"./ActivatedRouteState\";\n\nexport abstract class AbstractPage {\n  readonly #state: ActivatedRouteState;\n\n  constructor(state: ActivatedRouteState) {\n    this.#state = state;\n  }\n\n  protected get routeState(): ActivatedRouteState {\n    return this.#state;\n  }\n\n  abstract render(): HTMLElement | DocumentFragment;\n\n  onRender(): void {\n\n  }\n\n  onDestroy(): void {\n\n  }\n}\n","import {\n  AbstractPage,\n  ActivatedRouteState,\n  Guard,\n  GuardClass,\n  GuardFunction,\n  PathParams,\n  RedirectPath,\n  ResolvedData,\n  Resolver,\n  ResolverClass,\n  ResolverFunction,\n  RouteConfig\n} from \"./models\";\nimport {createPathRegExp, resolvePath} from \"./utils\";\nimport {ROUTER_BUS} from \"./constants\";\n\nexport class Router {\n  readonly #routes = new Map<RegExp, RouteConfig>();\n  readonly #guardInstances = new WeakMap<GuardClass, Guard>();\n  readonly #resolverInstances = new WeakMap<ResolverClass, Resolver>();\n  #activePage: AbstractPage | null = null;\n\n  constructor(routes: RouteConfig[]) {\n    routes.forEach((route) => {\n      this.#routes.set(createPathRegExp(route.path), route);\n    });\n  }\n\n  navigate(path: string, doNotPush = false) {\n    const absolutePath = resolvePath(location.pathname, path);\n    const [route, params] = this.#findRoute(absolutePath);\n\n    if (route) {\n      void this.#handleRoute(absolutePath, route, params ?? {}, doNotPush);\n    }\n  }\n\n  start(): void {\n    this.navigate(location.pathname);\n    window.addEventListener('popstate', (event) => {\n      this.navigate(event.state.path ?? location.pathname, true);\n    });\n    ROUTER_BUS.addEventListener('navigate', (event: Event) => {\n      const {detail: {path}} = event as CustomEvent<{ path: string }>;\n\n      this.navigate(path);\n    });\n  }\n\n  #findRoute(path: string): [RouteConfig | null, PathParams | null] {\n    for (const [regExp, routeConfig] of this.#routes) {\n      const execResult = regExp.exec(path);\n\n      if (execResult) {\n        return [routeConfig, execResult.groups ?? null];\n      }\n    }\n\n    return [null, null];\n  }\n\n  async #handleRoute(path: string, route: RouteConfig, routeParams: PathParams, doNotPush: boolean) {\n    const activatedRouteState: ActivatedRouteState = {\n      url: new URL(path, location.origin).toString(),\n      params: routeParams,\n      resolvedData: null,\n    };\n\n    ROUTER_BUS.dispatchEvent(new CustomEvent('navigatestart'));\n\n    const guardResult = await this.#checkGuards(route, activatedRouteState);\n\n    if (!guardResult) {\n      ROUTER_BUS.dispatchEvent(new CustomEvent('navigatecancel'));\n      return;\n    }\n\n    if (guardResult instanceof RedirectPath) {\n      return this.navigate(guardResult.toString());\n    }\n\n    activatedRouteState.resolvedData = await this.#checkResolvers(route, activatedRouteState);\n\n    if (route.redirectTo) {\n      return this.navigate(route.redirectTo);\n    }\n\n    if (route.page) {\n      const page = new route.page(activatedRouteState);\n      const content = page.render();\n\n      this.#activePage?.onDestroy();\n      this.#activePage = page;\n      ROUTER_BUS.dispatchEvent(new CustomEvent('navigateend', {\n        detail: {content},\n      }));\n      this.#activePage?.onRender();\n\n      if (!doNotPush) {\n        history.pushState({path}, '', activatedRouteState.url);\n      }\n    }\n\n  }\n\n  async #checkGuards({guards}: RouteConfig, state: ActivatedRouteState): Promise<boolean | RedirectPath> {\n    if (!guards || !guards.length) {\n      return true;\n    }\n\n    for (const guard of guards) {\n      const result = await this.#invokeGuard(guard, state);\n\n      if (result !== true) {\n        return result;\n      }\n    }\n\n    return true;\n  }\n\n  async #checkResolvers({resolve}: RouteConfig, state: ActivatedRouteState): Promise<null | ResolvedData> {\n    if (!resolve) {\n      return null;\n    }\n\n    return Promise\n      .all(\n        Object\n          .entries(resolve)\n          .map(([name, resolver]) => {\n            return this.#invokeResolver(resolver, state).then((value) => [name, value]);\n          })\n      )\n      .then((resultEntries) => Object.fromEntries(resultEntries));\n  }\n\n  #invokeGuard(guard: GuardFunction | GuardClass, state: ActivatedRouteState) {\n    if (isClass(guard)) {\n      if (!this.#guardInstances.has(guard)) {\n        this.#guardInstances.set(guard, new guard());\n      }\n\n      return this.#guardInstances.get(guard)!.canActivate(state);\n    }\n\n    return guard(state);\n  }\n\n  async #invokeResolver(resolver: ResolverFunction | ResolverClass, state: ActivatedRouteState): Promise<unknown> {\n    if (isClass(resolver)) {\n      if (!this.#resolverInstances.has(resolver)) {\n        this.#resolverInstances.set(resolver, new resolver());\n      }\n\n      return this.#resolverInstances.get(resolver)!.resolve(state);\n    }\n\n    return resolver(state);\n  }\n}\n\nfunction isClass<T>(value: CallableFunction | { new(...args: any[]): T }): value is { new(...args: any[]): T } {\n  return typeof value === 'function' && /^class /.test(value.toString());\n}\n","export function createPathRegExp(pathTemplate: string): RegExp {\n  return new RegExp('/' + pathTemplate.replace(/:([A-z]+)/g, (_, paramName) => {\n    return `(?<${paramName}>[^?/]+)`;\n  }) + '$');\n}\n","export function resolvePath(currenAbsolutePath: string, relativePath: string) {\n  if (/^\\//.test(relativePath)) {\n    return relativePath;\n  }\n\n  return '/' + [currenAbsolutePath, '/', relativePath]\n    .join('')\n    .split(/\\/+/)\n    .reduce<string[]>((fragments, fragment) => {\n      if (fragment === '.') {\n        return fragments;\n      }\n\n      if (fragment === '..') {\n        fragments.pop();\n      } else if (fragment) {\n        fragments.push(fragment);\n      }\n\n      return fragments;\n    }, [])\n    .join('/');\n}\n","import { ValidatorFunction } from \"./ValidatorFunction\";\r\nimport { ValidatorResult } from \"./ValidatorResult\";\r\n\r\nexport function composeValidators<T>(...validators: ValidatorFunction<T>[]): ValidatorFunction<T>{\r\n    return (value: T): ValidatorResult => {\r\n        for(const validator of validators){\r\n            const result = validator(value);\r\n\r\n            if (result){\r\n                return result;\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { FormValidatorConfiguration } from \"./FormValidatorConfiguration\";\r\nimport { ValidatorFunction } from \"./ValidatorFunction\";\r\nimport { ValidatorResult } from \"./ValidatorResult\";\r\nimport { composeValidators } from \"./composeValidators\";\r\n\r\nexport type FormValidateResult<Data extends object> = Partial<{\r\n    [P in keyof Data]: NonNullable<ValidatorResult>;\r\n}>;\r\n\r\nexport class FormValidator<Data extends object>{\r\n    readonly #validationMap: Map<string, ValidatorFunction<unknown>>;\r\n\r\n    constructor(configuration: FormValidatorConfiguration<Data>){\r\n\r\n        this.#validationMap = new Map();\r\n        for(const [key, value] of Object.entries(configuration) ){\r\n            this.#validationMap.set(key, composeValidators(...value as ValidatorFunction<unknown>[]));\r\n        }\r\n    }\r\n\r\n    validate(data: Data): FormValidateResult<Data> | null{\r\n\r\n        const errors: FormValidateResult<Data> [] = [];\r\n\r\n        for (const [popertyName, value] of Object.entries(data)){\r\n            const validator = this.#validationMap.get(popertyName);\r\n\r\n            if(validator){\r\n                const result = validator(value);\r\n                if (result){\r\n                    errors.push({[popertyName]: result} as FormValidateResult<Data> );\r\n                }\r\n            }\r\n        }\r\n\r\n        return errors.length ? Object.assign({}, ...errors) : null;\r\n    }\r\n}","import { ValidatorFunction } from \"./ValidatorFunction\";\r\n\r\nexport const requiredText: ValidatorFunction<string> = (value) =>{\r\n    return value.trim().length ? null : {requiredText: \"поле обязательно для заполнения.\"};\r\n}\r\n\r\nexport const validEmail: ValidatorFunction<string> = (value) =>{\r\n    return !value.trim().length  || /^[\\w-\\.]+@[\\w-]+\\.[a-z]{2,4}$/i.test(value) ? null : {requiredText: \"неверно заполнен e-mail\"};\r\n}\r\n\r\nexport const validPhone: ValidatorFunction<string> = (value) =>{\r\n    return /^[\\d\\+][\\d\\(\\)\\ -]{4,14}\\d$/.test(value) ? null : {requiredText: \"неверно заполнен телефон\"};\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { FormValidateResult } from \"./FormValidator\";\r\nimport { userDataValidating } from \"./userDataValidating\";\r\n\r\nexport function setFormErrors(document: Document, errors: FormValidateResult<userDataValidating> | null) : void{\r\n\r\n    if (!errors)\r\n        return; \r\n\r\n    for (const key in errors) {\r\n        setFormError(document, errors, key);          \r\n    }\r\n}\r\n\r\nexport function clearMessages(document: Document): void{\r\n\r\n    const errorsLists = document.querySelectorAll('.error-list');\r\n\r\n    for (const err of errorsLists) {\r\n        err.innerHTML = '';  \r\n    }\r\n\r\n}\r\n\r\nexport function setFormError(document: Document, errors: FormValidateResult<userDataValidating> | null, errName: string) : void{\r\n\r\n    const errEl = document.getElementById(errName + \"Error\");\r\n    if(!errEl) return;  \r\n\r\n    if (!errors) return; \r\n    \r\n    for (const property in errors[errName as keyof userDataValidating]) { \r\n        const err = errors[errName as keyof userDataValidating];\r\n\r\n        if (!err || !err[property]) continue;\r\n\r\n        const errLiOfEl = createElementByErr(err[property]);\r\n        errEl.appendChild(errLiOfEl);\r\n    }  \r\n}\r\n\r\nexport function createElementByErr(err: string): HTMLElement{\r\n\r\n    const el = document.createElement('li');\r\n    el.textContent = err;\r\n    el.style.color = \"red\";\r\n    return el;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","DataBase","constructor","name","path","this","_ready","Promise","resolve","open","init","ready","BrowserLocalStorage","super","getAll","data","extractDataFromStorage","getArray","extractArrayFromStorage","writeAll","saveDataToStorage","writeArray","localStorage","removeItem","storageData","getItem","JSON","parse","jsonData","stringify","setItem","get","table","getByQuery","query","getNewRecords","existedId","getByForeignKeys","fieldName","foreignKeys","currDB","fetch","then","response","json","list","dbTables","locations","complexes","apartments","users","mass","filter","el","includes","userStorage","favPropStorage","user","logInForm","document","forms","namedItem","buttonLogIn","querySelector","buttonSubmitLogIn","userLocal","userDataValidator","email","phone","password","updateFromDB","length","id","userRow","authorized","setVisualizationForUser","updateFavoriteFromLocalStorage","setAttribute","textContent","getElementById","style","display","removeAttribute","async","handleLogIn","event","preventDefault","userData","String","FormData","trim","errors","validate","authorize","setTimeout","location","reload","appendChild","addEventListener","page","guards","complexList","Array","from","objectList","values","catch","apartList","state","complexId","Number","params","updateByComplexId","complex","favoriteList","has","start","ObjectDB","_id","_name","_description","_imgMain","fillFromData","record","description","imgMain","propertyTypes","Property","price","propertyType","undefined","propertyOptions","_price","_propertyType","_location","_propertyOptions","map","dataMap","locationId","ResidentialProperty","_commissioningDate","_square","roomsNumber","_roomsNumber","commissioningDate","square","Apartment","apartment","fillFromDB","floor","tableName","ObjectList","_objectList","Map","checkNewItems","Object","keys","newItemsDB","createNewItems","findItem","tableRecord","obj","createNewItem","Complex","minPrice","maxPrice","Location","_coordinates","latitude","longitude","coordinates","forEach","element","newItemDB","set","_favoriteList","Set","dataRows","updateFavoriteFromDB","updateFavoriteFromServerDB","userFavorites","idArr","apartmentId","add","clear","setRemoveApartmentAsFavorite","idApartment","favorite","delete","propertyOptionsDescription","outdoorPool","indoorPool","videoSurveillance","bar","restaurant","fitnessRoom","roomsNumberTypes","roomsNumberDescription","studio","onePlusOne","twoPlusOne","threePlusOne","fourPlus","User","_phone","_email","_password","_authorized","dataRow","answ","value","templateEl","createElement","templateItemEl","innerHTML","ComplexPage","render","nameOfComplex","routeState","resolvedData","content","cloneNode","complexSections","cloneTemplateItemEl","buttonLike","dataset","apartId","target","isFavorite","roomsNumberEl","propertySquare","priceEl","floorEl","commissioningDateEl","descriptionEl","propertyOptionsEl","toString","options","opt","join","cloneTemplateEl","templEl","templHeader","append","ComplexesPage","clone","imgEl","complexEl","nameEl","locationEl","pricesEl","ProductPage","productId","FavoritesPage","HistoryPage","CartPage","HomePage","ROUTER_BUS","EventTarget","customElements","define","HTMLAnchorElement","connectedCallback","disconnectedCallback","removeEventListener","dispatchEvent","CustomEvent","detail","URL","href","pathname","extends","ROUTER_OUTLET_TEMPLATE","HTMLElement","attachShadow","mode","clearTimeout","replaceChildren","childNodes","remove","RedirectPath","AbstractPage","onRender","onDestroy","Router","routes","WeakMap","route","pathTemplate","RegExp","replace","_","paramName","navigate","doNotPush","absolutePath","currenAbsolutePath","test","relativePath","split","reduce","fragments","fragment","pop","push","window","isClass","regExp","routeConfig","execResult","exec","groups","routeParams","activatedRouteState","url","origin","guardResult","redirectTo","history","pushState","guard","result","all","entries","resolver","resultEntries","fromEntries","canActivate","composeValidators","validators","validator","FormValidator","configuration","key","popertyName","assign","requiredText","validEmail","validPhone","setFormErrors","setFormError","clearMessages","errorsLists","querySelectorAll","err","errName","errEl","property","errLiOfEl","createElementByErr","color","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Symbol","queue","d","fn","r","a","body","hasAwait","currentDeps","outerResolve","reject","depQueues","promise","rej","x","deps","dep","e","ret","wrapDeps","getResult","fnQueue","q","definition","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","i","Error","p"],"sourceRoot":""}