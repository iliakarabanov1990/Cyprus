{"version":3,"file":"main.afbfd3b3b4a2a3476df2.js","mappings":"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","sources":["webpack://spa-with-router/webpack/runtime/async module","webpack://spa-with-router/./src/dataBase/DataBase.ts","webpack://spa-with-router/./src/dataBase/BrowserLocalStorage.ts","webpack://spa-with-router/./src/dataBase/serviceDB.ts","webpack://spa-with-router/./src/dataBase/FireBaseDB.ts","webpack://spa-with-router/./src/index.ts","webpack://spa-with-router/./src/models/abstracts/ObjectDB.ts","webpack://spa-with-router/./src/models/listsAndEnums/dbTables.ts","webpack://spa-with-router/./src/models/abstracts/Property.ts","webpack://spa-with-router/./src/models/abstracts/ResidentialProperty.ts","webpack://spa-with-router/./src/models/listsAndEnums/propertyTypes.ts","webpack://spa-with-router/./src/models/apartment/Apartment.ts","webpack://spa-with-router/./src/models/abstracts/ObjectList.ts","webpack://spa-with-router/./src/models/complex/Complex.ts","webpack://spa-with-router/./src/models/location/Location.ts","webpack://spa-with-router/./src/models/listsAndEnums/lists.ts","webpack://spa-with-router/./src/models/complex/ComplexList.ts","webpack://spa-with-router/./src/models/location/LocationList.ts","webpack://spa-with-router/./src/models/apartment/ApartmentList.ts","webpack://spa-with-router/./src/models/listsAndEnums/propertyOptions.ts","webpack://spa-with-router/./src/models/listsAndEnums/roomsNumberTypes.ts","webpack://spa-with-router/./src/models/user/User.ts","webpack://spa-with-router/./src/pages/complex/ComplexPage.ts","webpack://spa-with-router/./src/pages/complexes/ComplexesPage.ts","webpack://spa-with-router/./src/pages/favorite/FavoritesPage.ts","webpack://spa-with-router/./src/pages/home/HomePage.ts","webpack://spa-with-router/./src/router/constants/ROUTER_BUS.ts","webpack://spa-with-router/./src/router/elements/RouterLink.ts","webpack://spa-with-router/./src/router/elements/RouterOutlet.ts","webpack://spa-with-router/./src/router/models/RedirectPath.ts","webpack://spa-with-router/./src/router/models/AbstractPage.ts","webpack://spa-with-router/./src/router/Router.ts","webpack://spa-with-router/./src/router/utils/createPathRegExp.ts","webpack://spa-with-router/./src/router/utils/resolvePath.ts","webpack://spa-with-router/./src/service/validator/composeValidators.ts","webpack://spa-with-router/./src/service/validator/FormValidator.ts","webpack://spa-with-router/./src/service/validator/Validators.ts","webpack://spa-with-router/./src/service/validator/serviceFunctions.ts","webpack://spa-with-router/webpack/bootstrap","webpack://spa-with-router/webpack/runtime/define property getters","webpack://spa-with-router/webpack/runtime/global","webpack://spa-with-router/webpack/runtime/hasOwnProperty shorthand","webpack://spa-with-router/webpack/runtime/publicPath","webpack://spa-with-router/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import { dbTables } from \"../models/listsAndEnums/dbTables\";\r\nimport { idDB } from \"../models/interfacesAndTypes/idDB\";\r\nimport { tableDB } from \"../models/interfacesAndTypes/tableDB\";\r\n\r\nexport abstract class DataBase{\r\n    protected _ready: Promise<boolean>;\r\n    readonly #path: string; \r\n    readonly #name: string;\r\n\r\n    constructor(name: string, path: string){\r\n        this._ready = Promise.resolve(false);\r\n        this.#path = path;\r\n        this.#name = name;\r\n        open();\r\n    }\r\n\r\n    open(): void{\r\n        this._ready = this.init();\r\n    };\r\n\r\n    abstract init(): Promise<boolean>;\r\n    abstract get(table?: dbTables,  id?: idDB): Promise<tableDB>;\r\n    abstract write(data: tableDB, table?: dbTables): Promise<boolean>;\r\n    abstract delete(table?: dbTables,  id?: idDB): Promise<boolean>;\r\n\r\n    get ready(): Promise<boolean>{\r\n        return this._ready;\r\n    }\r\n\r\n    get path(): string{\r\n        return this.#path;\r\n    }\r\n\r\n    get name(): string{\r\n        return this.#name;\r\n    }\r\n\r\n}","import { idDB } from \"../models/interfacesAndTypes/idDB\";\r\nimport { tableDB } from \"../models/interfacesAndTypes/tableDB\";\r\nimport { tableFieldValue } from \"../models/interfacesAndTypes/tableFieldValue\";\r\nimport { dbTables } from \"../models/listsAndEnums/dbTables\";\r\nimport { DataBase } from \"./DataBase\";\r\n\r\nexport class BrowserLocalStorage extends DataBase {\r\n  constructor(name: string, path: string) {\r\n    super(name, path);\r\n  }\r\n\r\n  async init(): Promise<boolean> {\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  async get(): Promise<tableDB> {\r\n    await this._ready;\r\n    const data = this.extractDataFromStorage();\r\n    return Promise.resolve(data ?? []);\r\n  }\r\n\r\n  async write(data: tableDB): Promise<boolean> {\r\n    await this.ready;\r\n    this.saveDataToStorage(data);\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  async delete(): Promise<boolean> {\r\n    await this.ready;\r\n    localStorage.removeItem(this.path + \"/\" + this.name);\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  private extractDataFromStorage(): tableDB | null{\r\n    const storageData = localStorage.getItem(this.path + \"/\" + this.name);\r\n    return storageData ? JSON.parse(storageData) : null;\r\n  }\r\n\r\n  private saveDataToStorage(data: tableDB | Array<idDB>): void {\r\n    const jsonData = JSON.stringify(data);\r\n    localStorage.setItem(this.path + \"/\" + this.name, jsonData);\r\n  }\r\n}\r\n","import { FireBaseDB } from \"./FireBaseDB\";\r\nimport { BrowserLocalStorage } from './BrowserLocalStorage';\r\n\r\nexport const currDB = new FireBaseDB('test', 'testPath');\r\nexport const userStorage = new BrowserLocalStorage('user', 'cyprus');\r\nexport const favPropStorage = new BrowserLocalStorage('favProp', 'cyprus');\r\n\r\n// export abstract class ServiceDB{\r\n\r\n//     private static _currDB: DataBase = new FireBaseDB('test', 'testPath');\r\n\r\n//     static async openConnection(){\r\n//         ServiceDB._currDB.open();\r\n//     }\r\n\r\n//     static get currDB(): DataBase{\r\n//         return ServiceDB._currDB;\r\n//     }\r\n// }","import { DataBase } from \"./DataBase\";\r\nimport { dbTables } from \"../models/listsAndEnums/dbTables\";\r\nimport { tableDB } from \"../models/interfacesAndTypes/tableDB\";\r\nimport { idDB } from \"../models/interfacesAndTypes/idDB\";\r\nimport listLocations from './listLocations.json';\r\nimport listComplexes from './listComplexes.json';\r\nimport listApartments from './listApartment.json'; \r\nimport listUsers from './listUsers.json'; \r\nimport { tableFieldValue } from \"../models/interfacesAndTypes/tableFieldValue\";\r\n\r\nexport class FireBaseDB extends DataBase{\r\n\r\n    constructor(name: string, path: string){\r\n        super(name, path);\r\n    }\r\n\r\n    async init(): Promise<boolean>{\r\n        return Promise.resolve(true);\r\n    };\r\n\r\n    async get(): Promise<tableDB>\r\n    {\r\n        return Promise.resolve([{}]);\r\n    };\r\n\r\n    async write(data: tableDB, table: dbTables): Promise<boolean>{\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    async delete(): Promise<boolean> {\r\n        return Promise.resolve(true);\r\n      }\r\n\r\n    async getNewRecords(table: dbTables, existedId: idDB[]): Promise<tableDB>{\r\n        \r\n        let list: any;\r\n\r\n        switch (table) {\r\n            case dbTables.locations:\r\n                list = listLocations;\r\n                break;\r\n            case dbTables.complexes:\r\n                list = listComplexes;\r\n                break;\r\n            case dbTables.apartments:\r\n                list = listApartments;\r\n                break;\r\n            default:\r\n                return Promise.resolve([]);\r\n        }      \r\n        \r\n        return fetch(list).then(response => response.json());\r\n    };  \r\n\r\n    async getByKeys(table: dbTables, fieldName: string, foreignKeys: tableFieldValue[]): Promise<tableDB>{\r\n\r\n    let list: any;\r\n\r\n    switch (table) {\r\n        case dbTables.locations:\r\n            list = listLocations;\r\n            break;\r\n        case dbTables.complexes:\r\n            list = listComplexes;\r\n            break;\r\n        case dbTables.apartments:\r\n            list = listApartments;\r\n            break;\r\n        case dbTables.users:\r\n            list = listUsers;\r\n            break;\r\n        default:\r\n            return Promise.resolve([]);\r\n    }\r\n    \r\n    return fetch(list)\r\n        .then(response => response.json())\r\n        .then(mass => mass.filter((el: {[id: idDB]: tableFieldValue}) => {\r\n            return foreignKeys.includes(el[fieldName])\r\n        }));\r\n        // return Promise.resolve(fetch(listLocations).then(response => response.json()));\r\n    };\r\n\r\n}","import { RedirectPath, Router } from \"./router\";\nimport { HomePage, ComplexesPage, FavoritesPage, } from \"./pages\";\nimport { complexes, apartments, locations } from \"./models/listsAndEnums/lists\";\nimport { dbTables } from \"./models/listsAndEnums/dbTables\";\nimport { ComplexPage } from \"./pages/complex/ComplexPage\";\nimport { User } from \"./models/user/User\";\nimport { userDataValidating } from \"./service/validator/userDataValidating\";\nimport { FormValidator } from \"./service/validator/FormValidator\";\nimport {requiredText, validEmail, validPhone} from \"./service/validator/Validators\";\nimport { clearMessages, createElementByErr, setFormErrors } from \"./service/validator/serviceFunctions\";\nimport { userStorage } from \"./dataBase/serviceDB\";\nimport { idDB } from \"./models/interfacesAndTypes/idDB\";\nimport \"./styles/style.scss\";\n\nawait locations.updateFromDB(dbTables.locations)\n  .then(() => complexes.updateFromDB(dbTables.complexes));\n\nconst logInForm = document.forms.namedItem(\"log-in\")!;\nconst buttonLogIn = document.querySelector('.log-in button')! as HTMLElement;\nconst buttonSubmitLogIn = logInForm.querySelector('button[name=\"submit\"]')! as HTMLElement;\nconst idPassLabel = document.getElementById('id-pass-label') as HTMLElement;\n\nlet user: User | undefined;\nconst userLocal = await userStorage.get();\nconst userDataValidator = new FormValidator <userDataValidating>({\n  name: [],\n  email: [\n      validEmail,\n  ],\n  phone: [\n      requiredText,\n      validPhone,\n  ],\n  password: [\n      requiredText,\n  ],\n});\n\n\nif(userLocal.length && userLocal[0].id){\n  const userRow = userLocal[0];\n  user = new User(userRow.id as idDB, userRow.email as string, '', userRow.name as string);\n  user.authorized = userRow.authorized as boolean;\n  setVisualizationForUser(user, logInForm, buttonLogIn, buttonSubmitLogIn, idPassLabel);\n  await apartments.updateFavoriteFromLocalStorage(user);\n}\n\nlogInForm.addEventListener(\"submit\", (event) => handleLogIn(event, user, logInForm, buttonLogIn, buttonSubmitLogIn, idPassLabel));\n\nconst appRouter = new Router([\n  {\n    path: \"\",\n    page: HomePage,\n  },\n  {\n    path: \"complexes\",\n    page: ComplexesPage,\n    resolve: {\n      complexList: () =>\n        locations.updateFromDB(dbTables.locations)\n          .then(() =>\n            complexes.updateFromDB(dbTables.complexes)\n          )\n          .then(() => {\n            return Array.from(complexes.objectList.values());\n          })\n          .catch(() => false),\n    },\n  },\n\n  {\n    path: \"complexes/:complexId\",\n    page: ComplexPage,\n    resolve: {\n      apartList: (state) => {\n        const complexId = Number(state.params.complexId);\n        return apartments.updateByComplexId(complexId).then(()=>\n            Array.from(apartments.objectList.values()).filter(el => el.complex!.id === complexId))\n      },\n      user: ()=>(user),\n    },\n  },\n\n  {\n    path: \"favorites\",\n    page: FavoritesPage,\n    resolve: {\n      apartList: () => {\n        return apartments.updateFavoriteFromLocalStorage(user!).then(()=>\n            Array.from(apartments.objectList.values()).filter(el => apartments.favoriteList.has(el.id)))\n      },\n      user: ()=>(user),\n    },\n    guards: [\n      () => {\n        if(user && user!.authorized)\n          return true;\n        return new Promise<RedirectPath>((resolve) => {\n            setTimeout(() => resolve(new RedirectPath(\"/\")), 2_000);\n        })},\n    ],\n  },\n]);\n\nappRouter.start();\n\nfunction setVisualizationForUser(user: User | undefined, logInForm: HTMLFormElement, buttonLogIn: HTMLElement, buttonSubmitLogIn: HTMLElement, idPassLabel: HTMLElement){\n\n  if(user){\n    logInForm.querySelector('input[name=\"user-name\"]')!.setAttribute('value', user.name as string);\n    logInForm.querySelector('input[name=\"user-phone\"]')!.setAttribute('value', user.phone as string);\n    logInForm.querySelector('input[name=\"user-email\"]')!.setAttribute('value', user.email as string);\n  }\n\n  if(user && user.authorized){\n    buttonLogIn.textContent = \"Профиль\";\n    buttonSubmitLogIn.textContent = \"Выйти\";\n    logInForm.querySelector('input[name=\"user-phone\"]')!.setAttribute('readOnly', 'true');\n    logInForm.querySelector('input[name=\"user-name\"]')!.setAttribute('readOnly', 'true');\n    logInForm.querySelector('input[name=\"user-email\"]')!.setAttribute('readOnly', 'true');\n    logInForm.querySelector('input[name=\"user-password\"]')!.setAttribute('type', 'hidden');\n    idPassLabel!.style.display = 'none'; \n  }\n  else{\n    buttonLogIn.textContent = \"Войти\";  \n    buttonSubmitLogIn.textContent = \"Войти\";\n    logInForm.querySelector('input[name=\"user-phone\"]')!.removeAttribute('readOnly');\n    logInForm.querySelector('input[name=\"user-email\"]')!.removeAttribute('readOnly');\n    logInForm.querySelector('input[name=\"user-name\"]')!.removeAttribute('readOnly');\n    logInForm.querySelector('input[name=\"user-password\"]')!.setAttribute('value', '');\n    logInForm.querySelector('input[name=\"user-password\"]')!.setAttribute('type', 'password');\n  }\n}\n\nasync function handleLogIn(event: SubmitEvent, user: User | undefined, logInForm: HTMLFormElement, buttonLogIn: HTMLElement, buttonSubmitLogIn: HTMLElement, idPassLabel: HTMLElement): Promise<void>{\n  \n  event.preventDefault();\n\n  if(buttonSubmitLogIn.textContent === \"Войти\"){\n\n    const userData: userDataValidating = {\n      name: String(new FormData(logInForm).get(\"user-name\")).trim(),\n      phone: String(new FormData(logInForm).get(\"user-phone\")).trim(),\n      email: String(new FormData(logInForm).get(\"user-email\")).trim(),\n      password: String(new FormData(logInForm).get(\"user-password\")).trim(),  \n    };\n\n    const errors = userDataValidator.validate(userData);\n    clearMessages(document);\n    setFormErrors(document, errors);\n\n    if(errors) return;\n\n    user = new User(userData.phone, userData.email, userData.password, userData.name);\n\n    await user.authorize().then(() => setVisualizationForUser(user, logInForm, buttonLogIn, buttonSubmitLogIn, idPassLabel));\n\n    if(user.authorized)\n      // document.getElementById('id-log-in')!.style.display='none';\n      setTimeout(()=>{location.reload()},100);\n    else\n      document.getElementById('submitError')!.appendChild(createElementByErr('Вход не выполнен'));\n  }\n  else{ \n    user!.authorized = false;\n    userStorage.write([{\n      'id': user!.phone,\n      'email': user!.email,\n      'name': user!.name,\n      'password': '',\n      'authorized': user!.authorized\n    }]);\n\n    setVisualizationForUser(user, logInForm, buttonLogIn as HTMLElement, buttonSubmitLogIn as HTMLElement, idPassLabel);\n    setTimeout(()=>{location.reload()},100);\n  }\n  if(user)\n    await apartments.updateFavoriteFromLocalStorage(user);\n}\n","import { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\n\r\nexport abstract class ObjectDB{\r\n\r\n    static readonly tableName: dbTables;\r\n\r\n    constructor(protected _id: idDB, \r\n            protected _name: string = '', \r\n                protected _description: string = '', \r\n                    protected _imgMain: string = ''){\r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n        this._name = record.name as string;\r\n        this._description = record.description as string;\r\n        this._imgMain = record.imgMain as string;\r\n    };\r\n\r\n    get id(): idDB{\r\n        return this._id;\r\n    }\r\n\r\n    get name(): string{\r\n        return this._name;\r\n    }\r\n\r\n    get description(): string{\r\n        return this._description;\r\n    }\r\n\r\n    get imgMain(): string{\r\n        return this._imgMain;\r\n    }\r\n\r\n    //abstract get(id: idDB):Promise<boolean>;\r\n    // abstract set(_properties: tableRecord):Promise<boolean>;\r\n    // abstract update(_properties: tableRecord):Promise<boolean>;\r\n    // abstract delete(id: idDB):Promise<boolean>;\r\n}","export enum dbTables {\r\n    locations,\r\n    complexes, \r\n    properties,\r\n    apartments,\r\n    userFavorites,\r\n    propertyType,\r\n    propertyOptions, \r\n    leads,\r\n    users,\r\n    quizzes,\r\n    quizAnswers,\r\n}","import { ObjectDB } from \"./ObjectDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { Location } from \"../location/Location\";\r\nimport { propertyTypes } from \"../listsAndEnums/propertyTypes\";\r\nimport { propertyOptions } from \"../listsAndEnums/propertyOptions\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { locations } from \"../listsAndEnums/lists\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\n\r\nexport abstract class Property extends ObjectDB{\r\n\r\n    protected _price: number;\r\n    protected _propertyOptions: propertyOptions[];\r\n    protected _propertyType: propertyTypes | undefined; \r\n    protected _location: Location | undefined;\r\n\r\n    constructor(id: idDB, name?: string, description: string = '', imgMain: string = '', price = 0, propertyType = undefined, location = undefined, propertyOptions = []){\r\n        super(id, name, description, imgMain); \r\n        this._price = price;\r\n        this._propertyType = propertyType;\r\n        this._location = location;\r\n        this._propertyOptions = propertyOptions;           \r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n\r\n        super.fillFromData(record);\r\n\r\n        this._propertyOptions = (record.propertyOptions as unknown[]).map(el => el as propertyOptions);\r\n        this._location = locations.getItem(record.locationId as number) as Location;\r\n    };\r\n\r\n    get location(): Location | undefined{\r\n        return this._location;\r\n    }\r\n\r\n    get propertyOptions(): propertyOptions[]{\r\n        return this._propertyOptions;\r\n    }\r\n\r\n    get propertyType(): propertyTypes | undefined{\r\n        return this._propertyType;\r\n    }\r\n\r\n    get price(): number{\r\n        return this._price;\r\n    }\r\n}","import { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { Location } from \"../location/Location\";\r\nimport { Property } from \"./Property\";\r\nimport { roomsNumberTypes } from \"../listsAndEnums/roomsNumberTypes\";\r\n\r\nexport abstract class ResidentialProperty extends Property{\r\n    \r\n    protected _location: Location | undefined;\r\n    \r\n    protected _roomsNumber: roomsNumberTypes | undefined;  \r\n    \r\n    protected _commissioningDate: string;\r\n\r\n    protected _square: number;\r\n\r\n    constructor(id: idDB){\r\n        super(id);      \r\n        this._commissioningDate = '';\r\n        this._square = 0;\r\n    }\r\n\r\n    get roomsNumber(): roomsNumberTypes | undefined{\r\n        return this._roomsNumber;\r\n    }\r\n\r\n    get commissioningDate(): string{\r\n        return this._commissioningDate;\r\n    }\r\n\r\n    get square(): number{\r\n        return this._square;\r\n    }\r\n}","export enum propertyTypes {\r\n    complex,\r\n    apartment,\r\n    house,\r\n}","import { ResidentialProperty } from \"../abstracts/ResidentialProperty\";\r\nimport { Complex } from \"../complex/Complex\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { complexes } from \"../listsAndEnums/lists\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { propertyTypes } from \"../listsAndEnums/propertyTypes\";\r\nimport { roomsNumberTypes } from \"../listsAndEnums/roomsNumberTypes\";\r\n\r\nexport class Apartment extends ResidentialProperty{\r\n\r\n    static tableName = dbTables.complexes;\r\n    #complex: Complex | undefined;\r\n    #floor: string;\r\n\r\n    constructor(id: idDB){\r\n        super(id);\r\n        \r\n        this._propertyType = propertyTypes.apartment;\r\n        this.#floor = '';\r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n\r\n        super.fillFromData(record);\r\n\r\n        this.#complex = complexes.getItem(record.complexId as number) as Complex;\r\n        this._roomsNumber = record.roomsNumber as roomsNumberTypes;\r\n        this._commissioningDate = record.commissioningDate as string;\r\n        this._square = record.square as number;\r\n        this.#floor = record.floor as string;\r\n        this._price = record.price as number;\r\n    }\r\n\r\n    get complex(): Complex | undefined{\r\n        return this.#complex;\r\n    }\r\n\r\n    get floor(): string{\r\n        return this.#floor;\r\n    }\r\n\r\n}","\r\nimport { currDB } from \"../../dataBase/serviceDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { ObjectDB } from \"./ObjectDB\";\r\n\r\nexport abstract class ObjectList<T extends ObjectDB> {\r\n   \r\n    protected _objectList: Map<idDB, T>; \r\n\r\n    constructor(){\r\n        this._objectList = new Map<idDB, T>();\r\n    }\r\n\r\n    abstract createNewItems(newItemsDB: tableDB): void;\r\n    abstract createNewItem(id: idDB, newItemsDB: tableRecord): T;\r\n    // abstract getItem(id: idDB, tableRecord?: tableRecord): T | undefined;\r\n\r\n    async checkNewItems(tableName: dbTables): Promise<tableDB | undefined>{\r\n\r\n        return await currDB.getNewRecords(tableName, Object.keys(this.objectList));\r\n\r\n        //return await ServiceDB.currDB.getByQuery(`SELECT * FROM ${tableName} WHERE NOT id IN ${Object.keys(this.objectList).join(', ')}`);\r\n        \r\n    }\r\n\r\n    async updateFromDB(tableName: dbTables): Promise<boolean>{\r\n\r\n        const newItemsDB = await this.checkNewItems(tableName);\r\n        if (newItemsDB)\r\n            this.createNewItems(newItemsDB);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    findItem(id: idDB): T | undefined{\r\n        return this._objectList.get(id);\r\n    }\r\n    getItem(id: idDB, tableRecord?: tableRecord): T | undefined{\r\n\r\n        let obj = this.findItem(id);\r\n        \r\n        if(!obj && tableRecord)\r\n            obj = this.createNewItem(id, tableRecord!);\r\n\r\n        return obj;    \r\n    }\r\n\r\n    get objectList(): Map<idDB, T>{\r\n        return this._objectList;\r\n    }\r\n\r\n}","import { Property } from \"../abstracts/Property\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { propertyTypes } from \"../listsAndEnums/propertyTypes\";\r\n\r\nexport class Complex extends Property{\r\n\r\n    static tableName = dbTables.complexes;\r\n    #minPrice: number;\r\n    #maxPrice: number;\r\n\r\n    constructor(id: idDB){\r\n        super(id);\r\n        this.#minPrice = 0;\r\n        this.#maxPrice = 0;\r\n        this._propertyType = propertyTypes.complex;\r\n    }\r\n\r\n    fillFromData(record: tableRecord): void{\r\n\r\n        super.fillFromData(record);\r\n           \r\n        this.#minPrice = record.minPrice as number;\r\n        this.#maxPrice = record.maxPrice as number;  \r\n    }\r\n\r\n    get minPrice(): number{\r\n        return this.#minPrice;\r\n    }\r\n    get maxPrice(): number{\r\n        return this.#maxPrice;\r\n    }\r\n}","import { Coordinates } from \"../interfacesAndTypes/Coordinates\";\r\nimport { ObjectDB } from \"../abstracts/ObjectDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\n\r\nexport class Location extends ObjectDB {\r\n  private _coordinates: Coordinates;\r\n  static tableName = dbTables.locations;\r\n\r\n  constructor(id: idDB, name?: string, description: string = '', imgMain: string = '',) {\r\n    super(id, name, description, imgMain);\r\n    this._coordinates = { latitude: \"\", longitude: \"\" };\r\n  }\r\n\r\n  fillFromData(record: tableRecord): void {\r\n\r\n    super.fillFromData(record);\r\n\r\n    this._coordinates.latitude = record.latitude as string;\r\n    this._coordinates.longitude = record.longitude as string;\r\n  }\r\n\r\n  get coordinates(): Coordinates {\r\n    return this._coordinates;\r\n  }\r\n\r\n    // async fillFromDB(): Promise<boolean> {\r\n  //   return Promise.resolve(true);\r\n  // }\r\n\r\n  // constructor(coordinates: Coordinates, name: string, description: string, id: idDB, tableName: dbTables){\r\n  //     super(tableName, id);\r\n  //     this._coordinates = coordinates;\r\n  //     this._name = name;\r\n  //     this._description = description;\r\n  // }\r\n\r\n  // async updateFromDB(): Promise<boolean>{\r\n  //     await this._dBObject.get(this._id);\r\n\r\n  //     this._coordinates.latitude = this._dBObject.properties['latitude'] as string;\r\n  //     this._coordinates.longitude = this._dBObject.properties['longitude'] as string;\r\n  //     this._name = this._dBObject.properties['name'] as string;\r\n  //     this._description = this._dBObject.properties['description'] as string;\r\n  //     this._id = this._dBObject.properties['id'] as idDB;\r\n\r\n  //     return Promise.resolve(true);\r\n  // }\r\n}\r\n","import { ApartmentList } from \"../apartment/ApartmentList\";\r\nimport { ComplexList } from \"../complex/ComplexList\"\r\nimport { LocationList } from \"../location/LocationList\";\r\n\r\nexport const complexes = new ComplexList();\r\nexport const locations = new LocationList();\r\nexport const apartments = new ApartmentList();\r\n\r\n// export const dataMap = new Map<dbTables, ObjectList<ObjectDB>>();\r\n\r\n// dataMap.set(dbTables.complexes, complexes);\r\n// dataMap.set(dbTables.locations, locations);\r\n// dataMap.set(dbTables.apartments, apartments);","import { Complex } from \"./Complex\";\r\nimport { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\n\r\nexport class ComplexList extends ObjectList<Complex>{\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    createNewItems(newItemsDB: tableDB): void{\r\n\r\n        newItemsDB.forEach(element => {\r\n            this.getItem(element.id as idDB, element as tableRecord);         \r\n        });    \r\n    }\r\n\r\n    // getItem(id: idDB, tableRecord?: tableRecord): Complex{\r\n\r\n    //     let obj = this.findItem(id);\r\n        \r\n    //     if(!obj)\r\n    //         obj = this.createNewItem(id, tableRecord);\r\n\r\n    //     return obj;    \r\n    // }\r\n\r\n    createNewItem(id: idDB, newItemDB?: tableRecord): Complex{\r\n        const complex = new Complex(id);\r\n        if(newItemDB)\r\n            complex.fillFromData(newItemDB);\r\n        // else\r\n        //     complex.fillFromDB();\r\n\r\n        this.objectList.set(id, complex);   \r\n\r\n        return complex;\r\n    }\r\n\r\n}","import { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { Location } from \"./Location\";\r\n\r\n\r\nexport class LocationList extends ObjectList<Location>{\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    // async updateFromDB(): Promise<boolean>{\r\n\r\n    //     const newItemsDB = await this.checkNewItems(Location.tableName);\r\n    //     if (newItemsDB)\r\n    //         this.createNewItems(newItemsDB);\r\n\r\n    //     return Promise.resolve(true);\r\n    // }\r\n\r\n    createNewItems(newItemsDB: tableDB): void{\r\n\r\n        newItemsDB.forEach(element => {\r\n            this.getItem(element.id as idDB, element as tableRecord);         \r\n        });    \r\n\r\n    }\r\n\r\n    // getItem(id: idDB, tableRecord?: tableRecord): Location | undefined{\r\n\r\n    //     if(!id)\r\n    //         return undefined;\r\n\r\n    //     let obj = this.findItem(id);\r\n        \r\n    //     if(!obj)\r\n    //         obj = this.createNewItem(id, tableRecord);\r\n\r\n    //     return obj;    \r\n\r\n    // }\r\n\r\n    createNewItem(id: idDB, newItemDB?: tableRecord): Location{\r\n        const location = new Location(id);\r\n        if(newItemDB)\r\n            location.fillFromData(newItemDB);\r\n        // else\r\n        //     location.fillFromDB();\r\n\r\n        this.objectList.set(id, location);\r\n\r\n        return location;\r\n    }\r\n\r\n}","import { Apartment } from \"./Apartment\";\r\nimport { ObjectList } from \"../abstracts/ObjectList\";\r\nimport { tableDB } from \"../interfacesAndTypes/tableDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { currDB, favPropStorage } from \"../../dataBase/serviceDB\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\nimport { User } from \"../user/User\";\r\nimport { tableFieldValue } from \"../interfacesAndTypes/tableFieldValue\";\r\n\r\nexport class ApartmentList extends ObjectList<Apartment>{\r\n\r\n    private _favoriteList: Set<idDB>; \r\n\r\n    constructor(){\r\n        super();\r\n        this._favoriteList = new Set<idDB>();\r\n    }\r\n\r\n    createNewItems(newItemsDB: tableDB): void{\r\n\r\n        newItemsDB.forEach(element => {\r\n            this.getItem(element.id as idDB, element as tableRecord);         \r\n        });    \r\n    }\r\n\r\n    // getItem(id: idDB, tableRecord?: tableRecord): Apartment{\r\n\r\n    //     let obj = this.findItem(id);\r\n        \r\n    //     if(!obj)\r\n    //         obj = this.createNewItem(id, tableRecord);\r\n\r\n    //     return obj;    \r\n    // }\r\n\r\n    createNewItem(id: idDB, newItemDB: tableRecord): Apartment{\r\n        const apartment = new Apartment(id);\r\n        apartment.fillFromData(newItemDB);\r\n        this.objectList.set(id, apartment);   \r\n        return apartment;\r\n    }\r\n\r\n    async updateByComplexId(id: idDB): Promise<boolean>{\r\n\r\n        return currDB.getByKeys(dbTables.apartments, \"complexId\", [Number(id)])\r\n            .then((dataRows) => this.createNewItems(dataRows))\r\n            .then(() => true)\r\n            .catch(() => false);\r\n    }\r\n\r\n    async updateFavoriteFromDB(user: User): Promise<boolean>{\r\n        if(user.authorized)\r\n            return this.updateFavoriteFromServerDB(user);\r\n        else\r\n            return this.updateFavoriteFromLocalStorage(user);\r\n    }\r\n\r\n    async updateFavoriteFromServerDB(user: User): Promise<boolean>{\r\n\r\n        return currDB.getByKeys(dbTables.userFavorites, \"userId\", [String(user.id)])\r\n            .then((dataRows) => {\r\n                const idArr = dataRows.map(el => el.apartmentId as number);\r\n                return currDB.getByKeys(dbTables.apartments, \"id\", idArr);\r\n            })\r\n            .then((dataRows) => {\r\n                this.createNewItems(dataRows);\r\n                return dataRows;\r\n            })\r\n            .then((dataRows) => {          \r\n                dataRows.forEach(el => {\r\n                    this._favoriteList.add(el.id as idDB);                 \r\n                });    \r\n            })\r\n            .then(() => true)\r\n            .catch(() => false);\r\n    }\r\n\r\n    async updateFavoriteFromLocalStorage(user: User): Promise<boolean>{\r\n\r\n        this._favoriteList.clear();\r\n        \r\n        if(!user.authorized) return Promise.resolve(true);\r\n\r\n        return favPropStorage.get()\r\n            .then((dataRows) => {\r\n                const idArr = dataRows.map(el => el.id as number);\r\n                return currDB.getByKeys(dbTables.apartments, \"id\", idArr);\r\n            })\r\n            .then((dataRows) => {\r\n                this.createNewItems(dataRows);\r\n                return dataRows;\r\n            })\r\n            .then((dataRows) => {          \r\n                dataRows.forEach(el => {\r\n                    this._favoriteList.add(el.id as idDB);                 \r\n                });    \r\n            })\r\n            .then(() => true)\r\n            .catch(() => false);\r\n    }\r\n\r\n    async setRemoveApartmentAsFavorite(user: User, idApartment: idDB, favorite: boolean){\r\n        if(favorite)\r\n            this._favoriteList.add(idApartment);\r\n        else\r\n            this._favoriteList.delete(idApartment);\r\n\r\n  \r\n        let tableOfId: tableDB = [];\r\n        this._favoriteList.forEach(el => {\r\n            tableOfId.push({id: el});\r\n        });\r\n\r\n        favPropStorage.write(tableOfId!);\r\n    }\r\n\r\n    get favoriteList(): Set<idDB>{\r\n        return this._favoriteList;\r\n    }\r\n\r\n}","export enum propertyOptions {\r\n    outdoorPool = <any> 'outdoorPool',\r\n    indoorPool = <any> 'indoorPool', \r\n    videoSurveillance = <any> 'videoSurveillance', \r\n    bar = <any> 'bar', \r\n    restaurant = <any> 'restaurant', \r\n    fitnessRoom = <any> 'fitnessRoom', \r\n}\r\n\r\nexport const propertyOptionsDescription = new Map<propertyOptions, string>([\r\n    [propertyOptions.outdoorPool, 'открытый бассейн'],\r\n    [propertyOptions.indoorPool, 'закрытый бассейн'],\r\n    [propertyOptions.videoSurveillance, 'видеонаблюдение'],\r\n    [propertyOptions.bar, 'бар'],\r\n    [propertyOptions.restaurant, 'ресторан'],\r\n    [propertyOptions.fitnessRoom, 'фитнес зал'],\r\n  ]);","export enum roomsNumberTypes {\r\n    studio = <any> 'studio',\r\n    onePlusOne = <any> 'onePlusOne',\r\n    twoPlusOne = <any> 'twoPlusOne',\r\n    threePlusOne = <any> 'threePlusOne',\r\n    fourPlus = <any> 'fourPlus',\r\n}\r\n\r\nexport const roomsNumberDescription = new Map<roomsNumberTypes, string>([\r\n    [roomsNumberTypes.studio, 'Студия'],\r\n    [roomsNumberTypes.onePlusOne, '1+1'],\r\n    [roomsNumberTypes.twoPlusOne, '2+1'],\r\n    [roomsNumberTypes.threePlusOne, '3+1'],\r\n    [roomsNumberTypes.fourPlus, '4+']\r\n  ]);","import { currDB, userStorage } from \"../../dataBase/serviceDB\";\r\nimport { ObjectDB } from \"../abstracts/ObjectDB\";\r\nimport { idDB } from \"../interfacesAndTypes/idDB\";\r\nimport { tableRecord } from \"../interfacesAndTypes/tableRecord\";\r\nimport { dbTables } from \"../listsAndEnums/dbTables\";\r\n\r\nexport class User extends ObjectDB {\r\n  private _phone: idDB;\r\n  private _email: string;\r\n  private _password: string;\r\n  private _authorized: boolean;\r\n  static tableName = dbTables.users;\r\n\r\n  constructor(phone: idDB, email: string = '', password: string = '', name: string = '', description: string = '', imgMain: string = '') {\r\n    \r\n    super(phone, name, description, imgMain);\r\n\r\n    this._phone = phone;\r\n    this._email = email;\r\n    this._password = password;\r\n    this._authorized = false;\r\n  }\r\n\r\n  async authorize(): Promise<boolean> {\r\n    if(!this._phone){\r\n        this._authorized = false;\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    return currDB.getByKeys(dbTables.users, \"id\", [String(this._phone)])\r\n        .then(dataRows => {\r\n\r\n            // let dataRow: tableRecord;\r\n            //if(!dataRows.length){\r\n                // dataRow = {\r\n                //     'id': this._phone,\r\n                //     'email': this._email,\r\n                //     'name': this._name,\r\n                //     'password': this._password,\r\n                // };\r\n                // currDB.write([dataRow], dbTables.users);\r\n                \r\n            // }\r\n            // else  \r\n            \r\n            if(!dataRows.length){\r\n                this._authorized = false;\r\n                return false;\r\n            }\r\n            const dataRow: tableRecord = dataRows[0];\r\n   \r\n            this._authorized = dataRow.password === this._password; // заменить на хэширование и проверку на сервере\r\n            if(this._authorized){  \r\n                if(!this._email)\r\n                    this._email = dataRow.email as string;\r\n                if(!this._name)\r\n                    this._name = dataRow.name as string;\r\n                \r\n                userStorage.write([{\r\n                        'id': this._phone,\r\n                        'email': this._email,\r\n                        'name': this._name,\r\n                        // 'password': this._password,\r\n                        'authorized': this._authorized,\r\n                    }]);\r\n            }\r\n\r\n            return this._authorized;\r\n\r\n        })\r\n        .then(answ => answ)\r\n        .catch(answ => false)\r\n    }\r\n\r\n    get phone(): idDB{\r\n        return this._phone;\r\n    }\r\n\r\n    get email(): string{\r\n        return this._email;\r\n    }\r\n\r\n    get authorized(): boolean{\r\n        return this._authorized;\r\n    }\r\n\r\n    set authorized(value: boolean){\r\n        this._authorized = value;\r\n    }\r\n\r\n}\r\n","import { Apartment } from \"../../models/apartment/Apartment\";\nimport { ApartmentList } from \"../../models/apartment/ApartmentList\";\nimport { ComplexList } from \"../../models/complex/ComplexList\";\nimport { apartments, complexes } from \"../../models/listsAndEnums/lists\";\nimport { dbTables } from \"../../models/listsAndEnums/dbTables\";\nimport { propertyOptionsDescription } from \"../../models/listsAndEnums/propertyOptions\";\nimport { roomsNumberDescription } from \"../../models/listsAndEnums/roomsNumberTypes\";\nimport { User } from \"../../models/user/User\";\nimport {AbstractPage} from \"../../router\";\nimport template from './ComplexPage.html';\nimport templateItem from './apartmentItem.html';\n\nconst templateEl = document.createElement('template');\nconst templateItemEl = document.createElement('template');\ntemplateEl.innerHTML = template;\ntemplateItemEl.innerHTML = templateItem;\n\nexport class ComplexPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    const nameOfComplex = complexes.objectList.get(Number(this.routeState.params.complexId))?.name;\n\n    if(!this.routeState.resolvedData || !this.routeState.resolvedData.apartList){\n      return templateEl.content.cloneNode(true) as DocumentFragment;                                                           \n    }\n\n    // const apartments = (dataMap.get(dbTables.apartments) as ApartmentList)?.objectList.values();\n    // if(!apartments)\n    //   return templateEl.content.cloneNode(true) as DocumentFragment;\n\n    const complexSections: DocumentFragment[] = (this.routeState.resolvedData.apartList as Apartment[]).map((el) => {\n      const cloneTemplateItemEl = templateItemEl.content.cloneNode(true) as DocumentFragment;\n\n      const buttonLike = cloneTemplateItemEl.querySelector('.apartment-box__like')! as HTMLElement;\n      buttonLike.dataset.apartId = el.id as string;\n\n      buttonLike.textContent = apartments.favoriteList.has(el.id) ? \"Снять отметку\" : \"Отметить\";\n\n      if(!this.routeState!.resolvedData!.user  || !(this.routeState!.resolvedData!.user as User).authorized)\n        buttonLike.setAttribute('disabled', '');\n\n      buttonLike.addEventListener('click', (event) => {\n        const apartId = Number((event.target as HTMLElement).dataset.apartId);\n        const isFavorite = apartments.favoriteList.has(el.id);\n        buttonLike.textContent = isFavorite ? \"Отметить\" : \"Снять отметку\";\n        apartments.setRemoveApartmentAsFavorite(this.routeState!.resolvedData!.user as User, apartId, !isFavorite)\n      });\n\n      // const imgEl = cloneTemplateItemEl.querySelector('.apartment-box__img')!;\n      // const nameEl = cloneTemplateItemEl.querySelector('.apartment-box__name')!;\n      const roomsNumberEl = cloneTemplateItemEl.querySelector('.apartment-box__roomsNumber')!;\n      const propertySquare = cloneTemplateItemEl.querySelector('.apartment-box__propertySquare')!;\n      const priceEl = cloneTemplateItemEl.querySelector('.apartment-box__price')!;\n      const floorEl = cloneTemplateItemEl.querySelector('.apartment-box__floor')!;\n      const commissioningDateEl = cloneTemplateItemEl.querySelector('.apartment-box__commissioningDate')!;\n\n      \n      const descriptionEl = cloneTemplateItemEl.querySelector('.apartment-box__description')!;\n      const propertyOptionsEl = cloneTemplateItemEl.querySelector('.apartment-box__propertyOptions')!;\n      \n\n      // imgEl.setAttribute('src', el.imgMain);\n      // nameEl.textContent = el.name;\n      if (el.roomsNumber)\n        roomsNumberEl.textContent = roomsNumberDescription.get(el.roomsNumber) ?? null;\n      propertySquare.textContent = `${el.square} м2` ?? null;\n      priceEl.textContent = `цена: ${el.price}$`;\n      commissioningDateEl.textContent = `дата сдачи: ${el.commissioningDate?.toString()}` ?? null;\n      floorEl.textContent = `этаж: ${el.floor}`;\n      if(el.propertyOptions.length){\n        const options = el.propertyOptions.map(opt => propertyOptionsDescription.get(opt));\n        propertyOptionsEl.innerHTML = `<span>${options.join('</span><span>')}</span>`;\n    }\n\n      descriptionEl.textContent = el.description;\n      \n      return cloneTemplateItemEl; \n    });\n\n    // templateEl.content.querySelector('.wrapper-complexes')!.innerHTML = complexSections.join(\"\\n\");\n    const cloneTemplateEl = templateEl.content.cloneNode(true) as DocumentFragment;\n    const templEl = cloneTemplateEl.querySelector('.wrapper-complex')!;\n    const templHeader = document.createElement(\"h1\");\n    templHeader.textContent = nameOfComplex!;\n    templEl.appendChild(templHeader);\n    templEl.append(...complexSections);\n    return cloneTemplateEl as DocumentFragment;\n  }\n}","import {AbstractPage} from \"../../router\";\nimport template from './complexesPage.html';\nimport templateItem from './complexesItemPage.html';\nimport { Complex } from \"../../models/complex/Complex\";\n\nconst templateEl = document.createElement('template');\nconst templateItemEl = document.createElement('template');\ntemplateEl.innerHTML = template;\ntemplateItemEl.innerHTML = templateItem;\n\ninterface ProductInfo {\n  id: number;\n  price: number;\n  title: string;\n}\n\nexport class ComplexesPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    if(!this.routeState.resolvedData || !this.routeState.resolvedData.complexList){\n      return templateEl.content.cloneNode(true) as DocumentFragment; \n    }\n    \n    // const complexes = (dataMap.get(dbTables.complexes) as ComplexList)?.objectList.values();\n    // if(!complexes)\n    //   return templateEl.content.cloneNode(true) as DocumentFragment;\n\n    const complexSections: DocumentFragment[] = (this.routeState.resolvedData.complexList as Complex[]).map((el) => {\n\n      const clone = templateItemEl.content.cloneNode(true) as DocumentFragment;\n      const imgEl = clone.querySelector('.complex-box__img')!;\n      const complexEl = clone.querySelector('.complex')!;\n      const nameEl = clone.querySelector('.complex-box__name')!;\n      const locationEl = clone.querySelector('.complex-box__location')!;\n      const pricesEl = clone.querySelector('.complex-box__prices')!;\n      complexEl.setAttribute('href', `complexes/${el.id}`);\n      nameEl.textContent = el.name;\n      locationEl.textContent = el.location?.name ?? null;\n      pricesEl.textContent = `цены: ${el.minPrice}$ - ${el.maxPrice}$`;\n      imgEl.setAttribute('src', el.imgMain);\n      // return templateItemEl.innerHTML;\n       return clone; \n    });\n\n    // templateEl.content.querySelector('.wrapper-complexes')!.innerHTML = complexSections.join(\"\\n\");\n    const clone = templateEl.content.cloneNode(true) as DocumentFragment;\n    clone.querySelector('.wrapper-complexes')!.append(...complexSections);\n    return clone as DocumentFragment;\n  }\n}\n","import { Apartment } from \"../../models/apartment/Apartment\";\nimport { ComplexList } from \"../../models/complex/ComplexList\";\nimport { apartments, complexes } from \"../../models/listsAndEnums/lists\";\nimport { dbTables } from \"../../models/listsAndEnums/dbTables\";\nimport { propertyOptionsDescription } from \"../../models/listsAndEnums/propertyOptions\";\nimport { roomsNumberDescription } from \"../../models/listsAndEnums/roomsNumberTypes\";\nimport {AbstractPage} from \"../../router\";\nimport template from './favoritesPage.html';\nimport templateItem from './apartmentItem.html';\nimport { ApartmentList } from \"../../models/apartment/ApartmentList\";\nimport { User } from \"../../models/user/User\";\n\nconst templateEl = document.createElement('template');\nconst templateItemEl = document.createElement('template');\ntemplateEl.innerHTML = template;\ntemplateItemEl.innerHTML = templateItem;\n\nexport class FavoritesPage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n\n    const nameOfComplex = complexes.objectList.get(Number(this.routeState.params.complexId))?.name;\n\n    if(!this.routeState.resolvedData || !this.routeState.resolvedData.apartList){\n      return templateEl.content.cloneNode(true) as DocumentFragment;                                                           \n    }\n\n    // const apartments = (dataMap.get(dbTables.apartments) as ApartmentList)?.objectList.values();\n    // if(!apartments)\n    //   return templateEl.content.cloneNode(true) as DocumentFragment;\n\n    const complexSections: DocumentFragment[] = (this.routeState.resolvedData.apartList as Apartment[]).map((el) => {\n      const cloneTemplateItemEl = templateItemEl.content.cloneNode(true) as DocumentFragment;\n\n      const buttonLike = cloneTemplateItemEl.querySelector('.apartment-box__like')! as HTMLElement;\n      buttonLike.dataset.apartId = el.id as string;\n\n      buttonLike.textContent = apartments.favoriteList.has(el.id) ? \"Снять отметку\" : \"Отметить\";\n\n      buttonLike.addEventListener('click', (event) => {\n        const apartId = Number((event.target as HTMLElement).dataset.apartId);\n        const isFavorite = apartments.favoriteList.has(el.id);\n        buttonLike.textContent = isFavorite ? \"Отметить\" : \"Снять отметку\";\n        apartments.setRemoveApartmentAsFavorite(this.routeState!.resolvedData!.user as User, apartId, !isFavorite)\n      });\n\n      const roomsNumberEl = cloneTemplateItemEl.querySelector('.apartment-box__roomsNumber')!;\n      const propertySquare = cloneTemplateItemEl.querySelector('.apartment-box__propertySquare')!;\n      const priceEl = cloneTemplateItemEl.querySelector('.apartment-box__price')!;\n      const floorEl = cloneTemplateItemEl.querySelector('.apartment-box__floor')!;\n      const commissioningDateEl = cloneTemplateItemEl.querySelector('.apartment-box__commissioningDate')!;\n\n      \n      const descriptionEl = cloneTemplateItemEl.querySelector('.apartment-box__description')!;\n      const propertyOptionsEl = cloneTemplateItemEl.querySelector('.apartment-box__propertyOptions')!;\n      \n\n      // imgEl.setAttribute('src', el.imgMain);\n      // nameEl.textContent = el.name;\n      if (el.roomsNumber)\n        roomsNumberEl.textContent = roomsNumberDescription.get(el.roomsNumber) ?? null;\n      propertySquare.textContent = `${el.square} м2` ?? null;\n      priceEl.textContent = `цена: ${el.price}$`;\n      commissioningDateEl.textContent = `дата сдачи: ${el.commissioningDate?.toString()}` ?? null;\n      floorEl.textContent = `этаж: ${el.floor}`;\n      if(el.propertyOptions.length){\n        const options = el.propertyOptions.map(opt => propertyOptionsDescription.get(opt));\n        propertyOptionsEl.innerHTML = `<span>${options.join('</span><span>')}</span>`;\n    }\n\n      descriptionEl.textContent = el.description;\n      \n      \n      \n      return cloneTemplateItemEl; \n    });\n\n    // templateEl.content.querySelector('.wrapper-complexes')!.innerHTML = complexSections.join(\"\\n\");\n    const cloneTemplateEl = templateEl.content.cloneNode(true) as DocumentFragment;\n    const templEl = cloneTemplateEl.querySelector('.wrapper-complex')!;\n    const templHeader = document.createElement(\"h1\");\n    templHeader.textContent = 'Отмеченные объекты недвижимости'!;\n    templEl.appendChild(templHeader);\n    templEl.append(...complexSections);\n    return cloneTemplateEl as DocumentFragment;\n  }\n}","import {AbstractPage} from \"../../router\";\nimport template from './homePage.html';\n\nconst templEl = document.createElement('template');\ntemplEl.innerHTML = template;\n\ninterface ProductInfo {\n  id: number;\n  price: number;\n  title: string;\n}\n\nexport class HomePage extends AbstractPage {\n  render(): HTMLElement | DocumentFragment {\n    return templEl.content.cloneNode(true) as DocumentFragment;\n  }\n}\n","export const ROUTER_BUS = new class RouterBus extends EventTarget {\n\n}();\n","import {ROUTER_BUS} from \"../constants\";\n\ncustomElements.define('router-link', class RouterLink extends HTMLAnchorElement {\n\n  connectedCallback(): void {\n    this.addEventListener('click', this.#onClick);\n  }\n\n  disconnectedCallback(): void {\n    this.removeEventListener('click', this.#onClick);\n  }\n\n  #onClick(event: MouseEvent) {\n    event.preventDefault();\n    ROUTER_BUS.dispatchEvent(new CustomEvent('navigate', {\n      detail: { path: new URL(this.href).pathname },\n    }));\n  }\n\n}, { extends: 'a' });\n","import {ROUTER_BUS} from \"../constants\";\n\nconst ROUTER_OUTLET_TEMPLATE = document.createElement('template');\nROUTER_OUTLET_TEMPLATE.innerHTML = `\n<style>\n.router-outlet {\n    position: relative;\n}\n</style>\n<div class=\"router-outlet\">\n    <slot name=\"page\"></slot>\n    <slot name=\"loader\"></slot>\n</div>\n`.trim();\n\n\ncustomElements.define('router-outlet', class RouterOutlet extends HTMLElement {\n  readonly #shadowRoot = this.attachShadow({ mode: \"open\" });\n  readonly #loader = document.createElement('div');\n  readonly #page = document.createElement('div');\n  #timerId: number | undefined;\n\n  readonly #onNavigateStart = (): void => {\n    clearTimeout(this.#timerId);\n    this.#timerId = setTimeout(() => {\n      this.appendChild(this.#loader);\n    }, 150) as unknown as number;\n  };\n\n  readonly #onNavigateCancel = (): void => {\n    this.#cancelLoader();\n  };\n\n  readonly #onNavigateEnd = (event: Event): void => {\n    const { detail: { content } } = event as CustomEvent<{ content: HTMLElement | DocumentFragment }>;\n\n    this.#page.replaceChildren(content);\n    this.appendChild(this.#page);\n    this.#cancelLoader();\n  };\n\n  constructor() {\n    super();\n    this.#shadowRoot.appendChild(ROUTER_OUTLET_TEMPLATE.content.cloneNode(true));\n    this.#loader.setAttribute('slot', 'loader');\n    this.#page.setAttribute('slot', 'page');\n    this.#loader.append(...this.childNodes);\n  }\n\n  connectedCallback(): void {\n    ROUTER_BUS.addEventListener('navigatestart', this.#onNavigateStart);\n    ROUTER_BUS.addEventListener('navigateend', this.#onNavigateEnd);\n    ROUTER_BUS.addEventListener('navigatecancel', this.#onNavigateCancel);\n  }\n\n  disconnectedCallback(): void {\n    ROUTER_BUS.removeEventListener('navigatestart', this.#onNavigateStart);\n    ROUTER_BUS.removeEventListener('navigateend', this.#onNavigateEnd);\n    ROUTER_BUS.removeEventListener('navigatecancel', this.#onNavigateCancel);\n  }\n\n  #cancelLoader(): void {\n    this.#loader.remove();\n    clearTimeout(this.#timerId);\n  }\n\n});\n","export class RedirectPath extends String {\n\n}\n","import {ActivatedRouteState} from \"./ActivatedRouteState\";\n\nexport abstract class AbstractPage {\n  readonly #state: ActivatedRouteState;\n\n  constructor(state: ActivatedRouteState) {\n    this.#state = state;\n  }\n\n  protected get routeState(): ActivatedRouteState {\n    return this.#state;\n  }\n\n  abstract render(): HTMLElement | DocumentFragment;\n\n  onRender(): void {\n\n  }\n\n  onDestroy(): void {\n\n  }\n}\n","import {\n  AbstractPage,\n  ActivatedRouteState,\n  Guard,\n  GuardClass,\n  GuardFunction,\n  PathParams,\n  RedirectPath,\n  ResolvedData,\n  Resolver,\n  ResolverClass,\n  ResolverFunction,\n  RouteConfig\n} from \"./models\";\nimport {createPathRegExp, resolvePath} from \"./utils\";\nimport {ROUTER_BUS} from \"./constants\";\n\nexport class Router {\n  readonly #routes = new Map<RegExp, RouteConfig>();\n  readonly #guardInstances = new WeakMap<GuardClass, Guard>();\n  readonly #resolverInstances = new WeakMap<ResolverClass, Resolver>();\n  #activePage: AbstractPage | null = null;\n\n  constructor(routes: RouteConfig[]) {\n    routes.forEach((route) => {\n      this.#routes.set(createPathRegExp(route.path), route);\n    });\n  }\n\n  navigate(path: string, doNotPush = false) {\n    const absolutePath = resolvePath(location.pathname, path);\n    const [route, params] = this.#findRoute(absolutePath);\n\n    if (route) {\n      void this.#handleRoute(absolutePath, route, params ?? {}, doNotPush);\n    }\n  }\n\n  start(): void {\n    this.navigate(location.pathname);\n    window.addEventListener('popstate', (event) => {\n      this.navigate(event.state.path ?? location.pathname, true);\n    });\n    ROUTER_BUS.addEventListener('navigate', (event: Event) => {\n      const {detail: {path}} = event as CustomEvent<{ path: string }>;\n\n      this.navigate(path);\n    });\n  }\n\n  #findRoute(path: string): [RouteConfig | null, PathParams | null] {\n    for (const [regExp, routeConfig] of this.#routes) {\n      const execResult = regExp.exec(path);\n\n      if (execResult) {\n        return [routeConfig, execResult.groups ?? null];\n      }\n    }\n\n    return [null, null];\n  }\n\n  async #handleRoute(path: string, route: RouteConfig, routeParams: PathParams, doNotPush: boolean) {\n    const activatedRouteState: ActivatedRouteState = {\n      url: new URL(path, location.origin).toString(),\n      params: routeParams,\n      resolvedData: null,\n    };\n\n    ROUTER_BUS.dispatchEvent(new CustomEvent('navigatestart'));\n\n    const guardResult = await this.#checkGuards(route, activatedRouteState);\n\n    if (!guardResult) {\n      ROUTER_BUS.dispatchEvent(new CustomEvent('navigatecancel'));\n      return;\n    }\n\n    if (guardResult instanceof RedirectPath) {\n      return this.navigate(guardResult.toString());\n    }\n\n    activatedRouteState.resolvedData = await this.#checkResolvers(route, activatedRouteState);\n\n    if (route.redirectTo) {\n      return this.navigate(route.redirectTo);\n    }\n\n    if (route.page) {\n      const page = new route.page(activatedRouteState);\n      const content = page.render();\n\n      this.#activePage?.onDestroy();\n      this.#activePage = page;\n      ROUTER_BUS.dispatchEvent(new CustomEvent('navigateend', {\n        detail: {content},\n      }));\n      this.#activePage?.onRender();\n\n      if (!doNotPush) {\n        history.pushState({path}, '', activatedRouteState.url);\n      }\n    }\n\n  }\n\n  async #checkGuards({guards}: RouteConfig, state: ActivatedRouteState): Promise<boolean | RedirectPath> {\n    if (!guards || !guards.length) {\n      return true;\n    }\n\n    for (const guard of guards) {\n      const result = await this.#invokeGuard(guard, state);\n\n      if (result !== true) {\n        return result;\n      }\n    }\n\n    return true;\n  }\n\n  async #checkResolvers({resolve}: RouteConfig, state: ActivatedRouteState): Promise<null | ResolvedData> {\n    if (!resolve) {\n      return null;\n    }\n\n    return Promise\n      .all(\n        Object\n          .entries(resolve)\n          .map(([name, resolver]) => {\n            return this.#invokeResolver(resolver, state).then((value) => [name, value]);\n          })\n      )\n      .then((resultEntries) => Object.fromEntries(resultEntries));\n  }\n\n  #invokeGuard(guard: GuardFunction | GuardClass, state: ActivatedRouteState) {\n    if (isClass(guard)) {\n      if (!this.#guardInstances.has(guard)) {\n        this.#guardInstances.set(guard, new guard());\n      }\n\n      return this.#guardInstances.get(guard)!.canActivate(state);\n    }\n\n    return guard(state);\n  }\n\n  async #invokeResolver(resolver: ResolverFunction | ResolverClass, state: ActivatedRouteState): Promise<unknown> {\n    if (isClass(resolver)) {\n      if (!this.#resolverInstances.has(resolver)) {\n        this.#resolverInstances.set(resolver, new resolver());\n      }\n\n      return this.#resolverInstances.get(resolver)!.resolve(state);\n    }\n\n    return resolver(state);\n  }\n}\n\nfunction isClass<T>(value: CallableFunction | { new(...args: any[]): T }): value is { new(...args: any[]): T } {\n  return typeof value === 'function' && /^class /.test(value.toString());\n}\n","export function createPathRegExp(pathTemplate: string): RegExp {\n  return new RegExp('/' + pathTemplate.replace(/:([A-z]+)/g, (_, paramName) => {\n    return `(?<${paramName}>[^?/]+)`;\n  }) + '$');\n}\n","export function resolvePath(currenAbsolutePath: string, relativePath: string) {\n  if (/^\\//.test(relativePath)) {\n    return relativePath;\n  }\n\n  return '/' + [currenAbsolutePath, '/', relativePath]\n    .join('')\n    .split(/\\/+/)\n    .reduce<string[]>((fragments, fragment) => {\n      if (fragment === '.') {\n        return fragments;\n      }\n\n      if (fragment === '..') {\n        fragments.pop();\n      } else if (fragment) {\n        fragments.push(fragment);\n      }\n\n      return fragments;\n    }, [])\n    .join('/');\n}\n","import { ValidatorFunction } from \"./ValidatorFunction\";\r\nimport { ValidatorResult } from \"./ValidatorResult\";\r\n\r\nexport function composeValidators<T>(...validators: ValidatorFunction<T>[]): ValidatorFunction<T>{\r\n    return (value: T): ValidatorResult => {\r\n        for(const validator of validators){\r\n            const result = validator(value);\r\n\r\n            if (result){\r\n                return result;\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { FormValidatorConfiguration } from \"./FormValidatorConfiguration\";\r\nimport { ValidatorFunction } from \"./ValidatorFunction\";\r\nimport { ValidatorResult } from \"./ValidatorResult\";\r\nimport { composeValidators } from \"./composeValidators\";\r\n\r\nexport type FormValidateResult<Data extends object> = Partial<{\r\n    [P in keyof Data]: NonNullable<ValidatorResult>;\r\n}>;\r\n\r\nexport class FormValidator<Data extends object>{\r\n    readonly #validationMap: Map<string, ValidatorFunction<unknown>>;\r\n\r\n    constructor(configuration: FormValidatorConfiguration<Data>){\r\n\r\n        this.#validationMap = new Map();\r\n        for(const [key, value] of Object.entries(configuration) ){\r\n            this.#validationMap.set(key, composeValidators(...value as ValidatorFunction<unknown>[]));\r\n        }\r\n    }\r\n\r\n    validate(data: Data): FormValidateResult<Data> | null{\r\n\r\n        const errors: FormValidateResult<Data> [] = [];\r\n\r\n        for (const [popertyName, value] of Object.entries(data)){\r\n            const validator = this.#validationMap.get(popertyName);\r\n\r\n            if(validator){\r\n                const result = validator(value);\r\n                if (result){\r\n                    errors.push({[popertyName]: result} as FormValidateResult<Data> );\r\n                }\r\n            }\r\n        }\r\n\r\n        return errors.length ? Object.assign({}, ...errors) : null;\r\n    }\r\n}","import { ValidatorFunction } from \"./ValidatorFunction\";\r\n\r\nexport const requiredText: ValidatorFunction<string> = (value) =>{\r\n    return value.trim().length ? null : {requiredText: \"поле обязательно для заполнения.\"};\r\n}\r\n\r\nexport const validEmail: ValidatorFunction<string> = (value) =>{\r\n    return !value.trim().length  || /^[\\w-\\.]+@[\\w-]+\\.[a-z]{2,4}$/i.test(value) ? null : {requiredText: \"неверно заполнен e-mail\"};\r\n}\r\n\r\nexport const validPhone: ValidatorFunction<string> = (value) =>{\r\n    return /^[\\d\\+][\\d\\(\\)\\ -]{4,14}\\d$/.test(value) ? null : {requiredText: \"неверно заполнен телефон\"};\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { FormValidateResult } from \"./FormValidator\";\r\nimport { userDataValidating } from \"./userDataValidating\";\r\n\r\nexport function setFormErrors(document: Document, errors: FormValidateResult<userDataValidating> | null) : void{\r\n\r\n    if (!errors)\r\n        return; \r\n\r\n    for (const key in errors) {\r\n        setFormError(document, errors, key);          \r\n    }\r\n}\r\n\r\nexport function clearMessages(document: Document): void{\r\n\r\n    const errorsLists = document.querySelectorAll('.error-list');\r\n\r\n    for (const err of errorsLists) {\r\n        err.innerHTML = '';  \r\n    }\r\n\r\n}\r\n\r\nexport function setFormError(document: Document, errors: FormValidateResult<userDataValidating> | null, errName: string) : void{\r\n\r\n    const errEl = document.getElementById(errName + \"Error\");\r\n    if(!errEl) return;  \r\n\r\n    if (!errors) return; \r\n    \r\n    for (const property in errors[errName as keyof userDataValidating]) { \r\n        const err = errors[errName as keyof userDataValidating];\r\n\r\n        if (!err || !err[property]) continue;\r\n\r\n        const errLiOfEl = createElementByErr(err[property]);\r\n        errEl.appendChild(errLiOfEl);\r\n    }  \r\n}\r\n\r\nexport function createElementByErr(err: string): HTMLElement{\r\n\r\n    const el = document.createElement('li');\r\n    el.textContent = err;\r\n    el.style.color = \"red\";\r\n    return el;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","DataBase","constructor","name","path","this","_ready","Promise","resolve","open","init","ready","BrowserLocalStorage","super","get","data","extractDataFromStorage","write","saveDataToStorage","localStorage","removeItem","storageData","getItem","JSON","parse","jsonData","stringify","setItem","currDB","table","getNewRecords","existedId","list","dbTables","locations","complexes","apartments","fetch","then","response","json","getByKeys","fieldName","foreignKeys","users","mass","filter","el","includes","userStorage","favPropStorage","updateFromDB","logInForm","document","forms","namedItem","buttonLogIn","querySelector","buttonSubmitLogIn","idPassLabel","getElementById","user","userLocal","userDataValidator","email","phone","password","length","id","userRow","authorized","setVisualizationForUser","updateFavoriteFromLocalStorage","setAttribute","textContent","style","display","removeAttribute","async","handleLogIn","event","preventDefault","userData","String","FormData","trim","errors","validate","authorize","setTimeout","location","reload","appendChild","addEventListener","page","complexList","Array","from","objectList","values","catch","apartList","state","complexId","Number","params","updateByComplexId","complex","favoriteList","has","guards","start","ObjectDB","_id","_name","_description","_imgMain","fillFromData","record","description","imgMain","Property","price","propertyType","undefined","propertyOptions","_price","_propertyType","_location","_propertyOptions","map","locationId","ResidentialProperty","_commissioningDate","_square","roomsNumber","_roomsNumber","commissioningDate","square","propertyTypes","Apartment","apartment","floor","tableName","ObjectList","_objectList","Map","checkNewItems","Object","keys","newItemsDB","createNewItems","findItem","tableRecord","obj","createNewItem","Complex","minPrice","maxPrice","Location","_coordinates","latitude","longitude","coordinates","forEach","element","newItemDB","set","_favoriteList","Set","dataRows","updateFavoriteFromDB","updateFavoriteFromServerDB","userFavorites","idArr","apartmentId","add","clear","setRemoveApartmentAsFavorite","idApartment","favorite","delete","tableOfId","push","propertyOptionsDescription","outdoorPool","indoorPool","videoSurveillance","bar","restaurant","fitnessRoom","roomsNumberTypes","roomsNumberDescription","studio","onePlusOne","twoPlusOne","threePlusOne","fourPlus","User","_phone","_email","_password","_authorized","dataRow","answ","value","templateEl","createElement","templateItemEl","innerHTML","ComplexPage","render","nameOfComplex","routeState","resolvedData","content","cloneNode","complexSections","cloneTemplateItemEl","buttonLike","dataset","apartId","target","isFavorite","roomsNumberEl","propertySquare","priceEl","floorEl","commissioningDateEl","descriptionEl","propertyOptionsEl","toString","options","opt","join","cloneTemplateEl","templEl","templHeader","append","ComplexesPage","clone","imgEl","complexEl","nameEl","locationEl","pricesEl","FavoritesPage","HomePage","ROUTER_BUS","EventTarget","customElements","define","HTMLAnchorElement","connectedCallback","disconnectedCallback","removeEventListener","dispatchEvent","CustomEvent","detail","URL","href","pathname","extends","ROUTER_OUTLET_TEMPLATE","HTMLElement","attachShadow","mode","clearTimeout","replaceChildren","childNodes","remove","RedirectPath","AbstractPage","onRender","onDestroy","Router","routes","WeakMap","route","pathTemplate","RegExp","replace","_","paramName","navigate","doNotPush","absolutePath","currenAbsolutePath","test","relativePath","split","reduce","fragments","fragment","pop","window","isClass","regExp","routeConfig","execResult","exec","groups","routeParams","activatedRouteState","url","origin","guardResult","redirectTo","history","pushState","guard","result","all","entries","resolver","resultEntries","fromEntries","canActivate","composeValidators","validators","validator","FormValidator","configuration","key","popertyName","assign","requiredText","validEmail","validPhone","setFormErrors","setFormError","clearMessages","errorsLists","querySelectorAll","err","errName","errEl","property","errLiOfEl","createElementByErr","color","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Symbol","queue","d","fn","r","a","body","hasAwait","currentDeps","outerResolve","reject","depQueues","promise","rej","x","deps","dep","e","ret","wrapDeps","getResult","fnQueue","q","definition","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","i","Error","p"],"sourceRoot":""}